	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_debug_Toggle
_debug_Toggle:
	call	_kb_Scan
	ld	hl, -720870
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	nz, BB0_7
BB0_1:
	ld	a, (_debugEnabled)
	bit	0, a
	jr	z, BB0_6
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	2, a
	jr	nz, BB0_10
BB0_3:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	1, a
	jr	nz, BB0_13
BB0_4:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jp	nz, BB0_16
BB0_5:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 1
	call	__sand
	bit	0, l
	jp	nz, BB0_19
BB0_6:
	ret
BB0_7:
	ld	a, (_debugEnabled)
	xor	a, 1
	ld	(_debugEnabled), a
BB0_8:
	ld	hl, -720870
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB0_1
	call	_kb_Scan
	jr	BB0_8
BB0_10:
	ld	hl, (_debugPage)
	inc	hl
	ld	bc, 3
	call	__irems
	ld	(_debugPage), hl
BB0_11:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	2, a
	jr	z, BB0_3
	call	_kb_Scan
	ld	iy, -720866
	jr	BB0_11
BB0_13:
	ld	de, 2
	ld	hl, (_debugPage)
	add	hl, de
	ld	bc, 3
	call	__irems
	ld	(_debugPage), hl
BB0_14:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	1, a
	jp	z, BB0_4
	call	_kb_Scan
	ld	iy, -720866
	jr	BB0_14
BB0_16:
	ld	hl, (_debugTileIndex)
	inc	hl
	ld	bc, 4
	call	__irems
	ld	(_debugTileIndex), hl
BB0_17:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jp	z, BB0_5
	call	_kb_Scan
	ld	iy, -720866
	jr	BB0_17
BB0_19:
	ld	hl, (_debugTileIndex)
	ld	de, 3
	add	hl, de
	ld	bc, 4
	call	__irems
	ld	(_debugTileIndex), hl
BB0_20:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 1
	call	__sand
	bit	0, l
	jp	z, BB0_6
	call	_kb_Scan
	ld	iy, -720866
	jr	BB0_20
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_debug_Update
_debug_Update:
	ld	hl, -24
	call	__frameset
	ld	a, (_debugEnabled)
	bit	0, a
	jp	z, BB1_15
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, -2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	de, (_debugPage)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB1_3
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 20
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.1
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_camX)
	ld	a, (_camX+3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_camY)
	ld	a, (_camY+3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_camZ)
	ld	a, (_camZ+3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 30
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.3
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_rotX)
	ld	a, (_rotX+3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_rotY)
	ld	a, (_rotY+3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 40
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.4
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (_cursorBlockX)
	ld	de, 3
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (_cursorBlockY)
	ld	de, 3
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (_cursorBlockZ)
	ld	de, 3
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 50
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.5
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_closestCursorDot)
	ld	a, (_closestCursorDot+3)
	ld	hl, -3670016
	ld	e, 66
	call	__fmul
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 60
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.6
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	a, (_cursorBlockValid)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 70
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.7
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (_cursorBlockFace)
	ld	de, 1
	push	de
	push	hl
	jp	BB1_12
BB1_3:
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	nz, BB1_7
	ld	hl, _debug_tz
	ld	(ix - 3), hl
	ld	hl, _debug_ty
	ld	(ix - 6), hl
	ld	hl, _debug_tx
	ld	(ix - 9), hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.8
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	de, 4
	ld	bc, 0
	ld	hl, 20
	ld	(ix - 15), hl
BB1_5:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	z, BB1_11
	ld	hl, (ix - 15)
	push	hl
	ld	hl, 2
	push	hl
	ld	(ix - 12), bc
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.9
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.10
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	iy, (ix - 9)
	ld	bc, (iy)
	ld	a, (iy + 3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	iy, (ix - 6)
	ld	bc, (iy)
	ld	a, (iy + 3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.2
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	iy, (ix - 3)
	ld	bc, (iy)
	ld	a, (iy + 3)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	ld	bc, (ix - 12)
	pop	hl
	pop	hl
	inc	bc
	ld	de, 10
	ld	hl, (ix - 15)
	add	hl, de
	ld	(ix - 15), hl
	ld	de, 4
	ld	iy, (ix - 9)
	lea	iy, iy + 4
	ld	(ix - 9), iy
	ld	iy, (ix - 6)
	lea	iy, iy + 4
	ld	(ix - 6), iy
	ld	iy, (ix - 3)
	lea	iy, iy + 4
	ld	(ix - 3), iy
	jp	BB1_5
BB1_7:
	ld	bc, 2
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jp	nz, BB1_16
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.17
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.18
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (_debugTileIndex)
	ld	de, 2
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	de, 18
	ld	hl, _texture_colors
	ld	(ix - 6), hl
	ld	(ix - 9), hl
	ld	iy, 0
BB1_9:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB1_17
	lea	de, iy
	ld	(ix - 21), de
	ld	hl, ___const.debug_Update.fx
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 3), hl
	ld	hl, ___const.debug_Update.fy
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 15), hl
	ld	hl, (_debugTileIndex)
	ld	de, 12
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 12), iy
	ld	iy, (ix - 9)
	add	iy, de
	ld	l, (iy)
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix - 3)
	ld	hl, 30
	ex	de, hl
	add	iy, de
	ld	(ix - 24), iy
	ld	de, (ix - 15)
	push	de
	pop	hl
	ld	bc, 30
	add	hl, bc
	ld	(ix - 18), hl
	ld	hl, (ix - 18)
	push	hl
	push	iy
	push	de
	push	iy
	push	de
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_FillTriangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_debugTileIndex)
	ld	bc, 12
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 9)
	add	iy, de
	ld	l, (iy + 1)
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 18)
	push	hl
	ld	de, (ix - 24)
	push	de
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	de, (ix - 15)
	push	de
	push	hl
	call	_gfx_FillTriangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 30
	push	hl
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	ex	de, hl
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	add	hl, de
	push	hl
	push	iy
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, ___const.debug_Update.labels
	ld	de, (ix - 21)
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintString
	ld	bc, (ix - 12)
	pop	hl
	ld	de, 3
	push	bc
	pop	hl
	add	hl, de
	ld	de, 18
	ld	iy, (ix - 9)
	lea	iy, iy + 2
	ld	(ix - 9), iy
	push	hl
	pop	iy
	jp	BB1_9
BB1_11:
	ld	hl, 70
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.11
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_debug_nz)
	ld	a, (_debug_nz+3)
	ld	hl, -3670016
	ld	e, 66
	call	__fmul
	call	__ftol
	ld	hl, 5
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 80
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.12
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_debug_dot)
	ld	a, (_debug_dot+3)
	ld	hl, -3670016
	ld	e, 66
	call	__fmul
	call	__ftol
	ld	hl, 5
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 90
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.13
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_debug_min_tz)
	ld	a, (_debug_min_tz+3)
	call	__ftol
	ld	hl, 4
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 100
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.14
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_debug_max_tz)
	ld	a, (_debug_max_tz+3)
	call	__ftol
	ld	hl, 4
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 110
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.15
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_debug_mag)
	ld	a, (_debug_mag+3)
	ld	hl, -3670016
	ld	e, 66
	call	__fmul
	call	__ftol
	ld	hl, 5
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 120
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.16
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_debug_area)
	ld	a, (_debug_area+3)
	call	__ftol
	ld	hl, 5
	push	hl
	push	bc
BB1_12:
	call	_gfx_PrintInt
	pop	hl
BB1_13:
	pop	hl
BB1_14:
	call	_gfx_SwapDraw
BB1_15:
	ld	sp, ix
	pop	ix
	ret
BB1_16:
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.25
	push	hl
	call	_gfx_PrintString
	jr	BB1_13
BB1_17:
	ld	de, 90
	ld	hl, 30
	push	hl
	pop	bc
BB1_18:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	hl, 2
	jr	z, BB1_14
	push	bc
	push	hl
	ld	(ix - 3), bc
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (_debugTileIndex)
	ld	de, 12
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 6)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	de, 3
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 32
	push	hl
	call	_gfx_PrintChar
	pop	hl
	ld	hl, (_debugTileIndex)
	ld	bc, 12
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 6)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy + 1)
	ld	de, 3
	push	de
	push	hl
	call	_gfx_PrintInt
	ld	iy, (ix - 3)
	pop	hl
	pop	hl
	ld	de, 10
	add	iy, de
	lea	bc, iy
	ld	de, 90
	ld	iy, (ix - 6)
	lea	iy, iy + 2
	ld	(ix - 6), iy
	jp	BB1_18
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -23
	call	__frameset
	call	_gfx_Begin
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetDraw
	pop	hl
	call	_load_texture_appvar
	bit	0, a
	jp	z, BB2_24
	lea	hl, ix - 10
	ld	(ix - 10), 0
	push	hl
	pop	iy
	inc	iy
	ld	bc, 9
	lea	de, iy
	ld	(ix - 19), hl
	ldir
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, -2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 50
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.26
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 70
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_PrintUInt
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 16), hl
	ld	(ix - 13), hl
BB2_2:
	call	_kb_Scan
	ld	iy, -720868
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	6, a
	lea	hl, iy
	jp	nz, BB2_25
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	bit	0, l
	jp	nz, BB2_26
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jp	nz, BB2_26
	ld	e, 0
	ld	(ix - 23), e
	or	a, a
	sbc	hl, hl
BB2_6:
	push	hl
	pop	de
	ld	bc, 10
	or	a, a
	sbc	hl, bc
	jr	z, BB2_12
	push	de
	pop	iy
	ld	bc, 769
	add	iy, bc
	lea	hl, iy
	ld	c, 8
	call	__ishru
	ld	c, 1
	call	__ishl
	push	hl
	pop	bc
	ld	hl, -720880
	add	hl, bc
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	(ix - 22), iy
	ld	a, iyl
	and	a, l
	or	a, a
	jr	z, BB2_11
	push	de
	pop	bc
	ld	hl, (ix - 19)
	add	hl, bc
	bit	0, (hl)
	push	de
	pop	iy
	jr	nz, BB2_11
	ld	de, (ix - 16)
	push	de
	pop	hl
	ld	bc, 10
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB2_11
	ld	hl, (ix - 13)
	ld	bc, 10
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	inc	de
	ld	(ix - 16), de
	ld	e, 1
	ld	(ix - 23), e
	ld	(ix - 13), iy
BB2_11:
	ld	hl, (ix - 22)
	ld	bc, -768
	add	hl, bc
	jr	BB2_6
BB2_12:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	ld	de, (ix - 16)
	jr	z, BB2_16
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB2_16
BB2_14:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	z, BB2_17
	call	_kb_Scan
	ld	de, (ix - 16)
	jr	BB2_14
BB2_16:
	ld	a, (ix - 23)
	and	a, 1
	bit	0, a
	jr	nz, BB2_18
	jr	BB2_19
BB2_17:
	ld	hl, (ix - 13)
	ld	bc, 10
	call	__idivu
	ld	(ix - 13), hl
	dec	de
BB2_18:
	ld	(ix - 16), de
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, -2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 50
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.26
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 70
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, (ix - 13)
	push	hl
	call	_gfx_PrintUInt
	ld	de, (ix - 16)
	pop	hl
	pop	hl
BB2_19:
	ld	(ix - 16), de
	ld	de, 0
BB2_20:
	push	de
	pop	hl
	ld	bc, 10
	or	a, a
	sbc	hl, bc
	jp	z, BB2_2
	push	de
	pop	iy
	ld	bc, 769
	add	iy, bc
	lea	hl, iy
	ld	c, 8
	call	__ishru
	ld	c, 1
	call	__ishl
	push	hl
	pop	bc
	ld	hl, -720880
	add	hl, bc
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, iyl
	and	a, l
	ld	hl, (ix - 19)
	add	hl, de
	or	a, a
	ld	a, 1
	jr	nz, BB2_23
	ld	a, 0
BB2_23:
	ld	(hl), a
	ld	de, -768
	add	iy, de
	lea	de, iy
	jr	BB2_20
BB2_24:
	call	_gfx_End
BB2_25:
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
BB2_26:
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, (ix - 13)
	push	hl
	call	_initWorld
	pop	hl
	call	_initPlayer
	or	a, a
	sbc	hl, hl
	ld	(ix - 13), hl
BB2_27:
	call	_debug_Toggle
	ld	a, (_debugEnabled)
	bit	0, a
	jr	nz, BB2_31
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB2_30
	call	_runPauseMenu
	ld	de, 4
	or	a, a
	sbc	hl, de
	jr	z, BB2_25
BB2_30:
	call	_updatePlayer
	call	_updateFPS
	ld	hl, (ix - 13)
	inc	hl
	ld	(ix - 13), hl
	ld	bc, 3
	call	__iremu
	add	hl, bc
	or	a, a
	sbc	hl, bc
	call	z, _updateCursorTarget
	call	_drawSkybox
	call	_drawWorld
	call	_gfx_SwapDraw
	jr	BB2_27
BB2_31:
	call	_debug_Update
	jr	BB2_27
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_valueNoise2D
_valueNoise2D:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, (ix + 9)
	ld	bc, 57
	ld	a, 82
	call	__imulu
	push	hl
	pop	iy
	add	iy, de
	ld	c, 13
	lea	hl, iy
	call	__ishl
	lea	bc, iy
	call	__ixor
	push	hl
	pop	iy
	ld	bc, 15731
	call	__imulu
	lea	bc, iy
	call	__imulu
	ld	de, 789221
	add	hl, de
	call	__imulu
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	de
	push	bc
	pop	hl
	ld	bc, 580877
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	call	__ltof
	ld	iy, -8388608
	lea	hl, iy
	ld	e, 48
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy
	ld	a, 63
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_smoothNoise2D
_smoothNoise2D:
	ld	hl, -17
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	dec	hl
	ld	(ix - 9), hl
	dec	de
	ld	(ix - 3), de
	push	de
	push	hl
	call	_valueNoise2D
	ld	(ix - 6), hl
	ld	(ix - 15), e
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	ex	de, hl
	inc	de
	ld	(ix - 12), de
	ld	hl, (ix - 3)
	push	hl
	push	de
	call	_valueNoise2D
	pop	bc
	pop	bc
	ld	bc, (ix - 6)
	ld	a, (ix - 15)
	call	__fadd
	ld	(ix - 15), bc
	ld	(ix - 16), a
	ld	hl, (ix + 9)
	inc	hl
	ld	(ix - 6), hl
	push	hl
	ld	hl, (ix - 9)
	push	hl
	call	_valueNoise2D
	pop	bc
	pop	bc
	ld	bc, (ix - 15)
	ld	a, (ix - 16)
	call	__fadd
	ld	(ix - 15), bc
	ld	(ix - 16), a
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_valueNoise2D
	pop	bc
	pop	bc
	ld	bc, (ix - 15)
	ld	a, (ix - 16)
	call	__fadd
	ld	hl, -8388608
	ld	e, 61
	call	__fmul
	ld	(ix - 15), bc
	ld	(ix - 16), a
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	call	_valueNoise2D
	ld	(ix - 9), hl
	ld	(ix - 17), e
	pop	hl
	pop	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_valueNoise2D
	pop	bc
	pop	bc
	ld	bc, (ix - 9)
	ld	a, (ix - 17)
	call	__fadd
	ld	(ix - 9), bc
	ld	(ix - 12), a
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_valueNoise2D
	pop	bc
	pop	bc
	ld	bc, (ix - 9)
	ld	a, (ix - 12)
	call	__fadd
	ld	(ix - 3), bc
	ld	(ix - 9), a
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_valueNoise2D
	pop	bc
	pop	bc
	ld	bc, (ix - 3)
	ld	a, (ix - 9)
	call	__fadd
	or	a, a
	sbc	hl, hl
	ld	e, 62
	call	__fmul
	ld	(ix - 3), bc
	ld	(ix - 6), a
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_valueNoise2D
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, -8388608
	ld	e, 62
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 15)
	ld	a, (ix - 16)
	ld	hl, (ix - 3)
	ld	e, (ix - 6)
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy
	ld	a, d
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_interpolatedNoise
_interpolatedNoise:
	ld	hl, -26
	call	__frameset
	ld	bc, (ix + 6)
	ld	iy, (ix + 12)
	ld	d, (ix + 15)
	ld	a, (ix + 9)
	call	__ftol
	push	bc
	pop	hl
	lea	bc, iy
	ld	a, d
	call	__ftol
	ld	(ix - 3), bc
	push	hl
	pop	bc
	ld	(ix - 6), bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__fsub
	ld	(ix - 9), bc
	ld	(ix - 10), a
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix + 12)
	ld	a, d
	call	__fsub
	ld	(ix - 18), bc
	ld	(ix - 19), a
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	call	_smoothNoise2D
	ld	(ix - 14), hl
	ld	(ix - 15), e
	pop	hl
	pop	hl
	ld	de, (ix - 6)
	inc	de
	ld	(ix - 22), de
	ld	hl, (ix - 3)
	push	hl
	push	de
	call	_smoothNoise2D
	ld	(ix - 25), hl
	ld	(ix - 26), e
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	push	hl
	ld	hl, (ix - 6)
	push	hl
	call	_smoothNoise2D
	ld	(ix - 6), hl
	ld	(ix - 11), e
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 22)
	push	hl
	call	_smoothNoise2D
	ld	(ix - 3), hl
	ld	(ix - 22), e
	pop	hl
	pop	hl
	ld	bc, (ix - 25)
	ld	a, (ix - 26)
	ld	hl, (ix - 14)
	ld	e, (ix - 15)
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 9)
	ld	a, (ix - 10)
	call	__fmul
	ld	hl, (ix - 14)
	ld	e, (ix - 15)
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 3)
	ld	a, (ix - 22)
	ld	hl, (ix - 6)
	ld	e, (ix - 11)
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 9)
	ld	a, (ix - 10)
	call	__fmul
	ld	hl, (ix - 6)
	ld	e, (ix - 11)
	call	__fadd
	lea	hl, iy
	ld	e, d
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 18)
	ld	a, (ix - 19)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_fbmNoise2D
_fbmNoise2D:
	ld	hl, -22
	call	__frameset
	ld	iy, (ix + 18)
	ld	bc, 0
	xor	a, a
	ld	de, 1
	lea	hl, iy
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB6_2
	push	bc
	pop	iy
BB6_2:
	ld	l, 63
	ld	(ix - 4), bc
	ld	bc, -8388608
	ld	de, -8388608
	ld	(ix - 12), de
	ld	(ix - 1), l
	ld	(ix - 13), l
	or	a, a
	sbc	hl, hl
	ld	(ix - 7), hl
	ld	(ix - 8), a
BB6_3:
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_5
	ld	(ix - 16), bc
	ld	(ix - 9), a
	ld	a, (ix - 1)
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	call	__fmul
	ld	(ix - 22), bc
	ld	(ix - 19), iy
	ld	iyl, a
	ld	bc, (ix - 16)
	ld	a, (ix - 1)
	ld	hl, (ix + 12)
	ld	e, (ix + 15)
	call	__fmul
	ld	l, a
	push	hl
	push	bc
	push	iy
	ld	hl, (ix - 22)
	push	hl
	call	_interpolatedNoise
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix - 12)
	lea	hl, iy
	ld	d, (ix - 13)
	ld	e, d
	call	__fmul
	ld	hl, (ix - 4)
	ld	e, (ix - 9)
	call	__fadd
	ld	(ix - 4), bc
	ld	(ix - 9), a
	lea	bc, iy
	ld	a, d
	ld	hl, (ix - 7)
	ld	e, (ix - 8)
	call	__fadd
	ld	(ix - 7), bc
	ld	(ix - 8), a
	lea	bc, iy
	ld	a, d
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	call	__fmul
	ld	(ix - 12), bc
	ld	(ix - 13), a
	ld	bc, (ix - 16)
	ld	a, (ix - 1)
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 19)
	ld	e, 64
	call	__fmul
	ld	(ix - 1), a
	ld	a, (ix - 9)
	dec	iy
	jp	BB6_3
BB6_5:
	ld	bc, (ix - 4)
	ld	hl, (ix - 7)
	ld	e, (ix - 8)
	call	__fdiv
	push	bc
	pop	hl
	ld	e, a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawPauseMenu
_drawPauseMenu:
	ld	hl, -12
	call	__frameset
	ld	hl, _pause_labels
	ld	(ix - 6), hl
	ld	hl, 55
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 15
	push	hl
	ld	hl, 130
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.5.32
	push	hl
	call	_gfx_PrintString
	ld	bc, 0
	pop	hl
BB7_1:
	ld	de, 5
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	z, BB7_5
	ld	hl, (ix - 3)
	ld	de, -5
	add	hl, de
	ld	(ix - 12), hl
	ld	de, (_pause_selected)
	ld	(ix - 9), bc
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	a, -1
	ld	l, a
	jr	z, BB7_4
	ld	a, 115
	ld	l, a
BB7_4:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 18
	push	hl
	ld	hl, 140
	push	hl
	ld	hl, (ix - 12)
	push	hl
	ld	hl, 90
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, 100
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	de, (hl)
	push	de
	call	_gfx_PrintString
	pop	hl
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 20
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	ld	iy, (ix - 6)
	lea	iy, iy + 3
	ld	(ix - 6), iy
	jp	BB7_1
BB7_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_runPauseMenu
_runPauseMenu:
	ld	hl, -3
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	(_pause_selected), hl
BB8_1:
	call	_kb_Scan
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	nz, BB8_1
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jr	nz, BB8_1
	ld	e, 0
BB8_4:
	ld	(ix - 3), e
	call	_kb_Scan
	call	_drawPauseMenu
	call	_gfx_SwapDraw
	ld	a, (ix - 3)
	ld	l, a
	dec	l
	or	a, a
	ld	e, 0
	jr	z, BB8_6
	ld	e, l
BB8_6:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	jr	z, BB8_10
	ld	a, e
	or	a, a
	jr	nz, BB8_10
	ld	hl, (_pause_selected)
	push	hl
	pop	iy
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB8_10
	lea	hl, iy
	dec	hl
	ld	iy, -720878
	jr	BB8_14
BB8_10:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	bit	0, l
	jr	z, BB8_15
	ld	a, e
	or	a, a
	jr	nz, BB8_15
	ld	hl, (_pause_selected)
	ld	(ix - 3), hl
	ld	bc, 4
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	ld	iy, -720878
	jp	p, BB8_16
	ld	hl, (ix - 3)
	inc	hl
BB8_14:
	ld	(_pause_selected), hl
	ld	e, 8
	jr	BB8_16
BB8_15:
	ld	iy, -720878
BB8_16:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	5, a
	jr	nz, BB8_20
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jp	z, BB8_4
BB8_18:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB8_23
	call	_kb_Scan
	jr	BB8_18
BB8_20:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	5, a
	jr	z, BB8_22
	call	_kb_Scan
	ld	iy, -720878
	jr	BB8_20
BB8_22:
	ld	hl, (_pause_selected)
	jr	BB8_24
BB8_23:
	or	a, a
	sbc	hl, hl
BB8_24:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_updatePlayerFOV
_updatePlayerFOV:
	ld	hl, 4788187
	ld	e, 64
	ld	iy, 3407872
	ld	d, 63
	ld	bc, (_cameraFOVDegrees)
	ld	a, (_cameraFOVDegrees+3)
	call	__fmul
	lea	hl, iy
	ld	e, 67
	call	__fdiv
	or	a, a
	sbc	hl, hl
	ld	e, d
	call	__fmul
	ld	l, a
	push	hl
	push	bc
	call	_tanf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	ld	bc, 7340032
	ld	a, 67
	call	__fdiv
	ld	(_playerFOV), bc
	ld	(_playerFOV+3), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_initPlayer
_initPlayer:
	call	_setCameraSpawnAboveTerrain
	jp	_updatePlayerFOV
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_setCameraSpawnAboveTerrain
_setCameraSpawnAboveTerrain:
	ld	iy, _world+2296
	ld	bc, 15
	ld	de, 0
BB11_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB11_4
	ld	a, (iy)
	or	a, a
	jr	nz, BB11_5
	dec	bc
	lea	iy, iy - 16
	jr	BB11_1
BB11_4:
	or	a, a
	sbc	hl, hl
	jr	BB11_6
BB11_5:
	push	bc
	pop	hl
BB11_6:
	ld	de, -7028736
	ld	(_camX), de
	ld	d, 67
	ld	a, d
	ld	(_camX+3), a
	ld	bc, 2
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	ld	e, 66
	call	__fmul
	ld	hl, -7602176
	dec	e
	call	__fadd
	ld	(_camY), bc
	ld	(_camY+3), a
	ld	hl, -7028736
	ld	(_camZ), hl
	ld	a, d
	ld	(_camZ+3), a
	ld	hl, 5033165
	ld	(_rotX), hl
	ld	a, 62
	ld	(_rotX+3), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_updatePlayer
_updatePlayer:
	ld	hl, -9
	call	__frameset
	call	_kb_Scan
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	1, a
	ld	iy, _rotY
	lea	hl, iy + 3
	ld	(ix - 3), hl
	jr	z, BB12_2
	ld	bc, (_rotY)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, 5033165
	ld	e, -67
	call	__fadd
	ld	(_rotY), bc
	ld	(_rotY+3), a
BB12_2:
	ld	e, 61
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	2, a
	jr	z, BB12_4
	ld	bc, (_rotY)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	hl, 5033165
	call	__fadd
	ld	(_rotY), bc
	ld	(_rotY+3), a
BB12_4:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	bc, (_rotX)
	ld	a, (_rotX+3)
	ld	d, a
	bit	3, l
	jr	nz, BB12_6
	ld	(ix - 6), bc
	jr	BB12_7
BB12_6:
	ld	a, d
	ld	hl, 5033165
	ld	e, -67
	call	__fadd
	ld	d, a
	ld	(ix - 6), bc
	ld	(_rotX), bc
	ld	(_rotX+3), a
BB12_7:
	ld	iyl, -65
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	bit	0, l
	jr	nz, BB12_9
	ld	hl, (ix - 6)
	jr	BB12_10
BB12_9:
	ld	bc, (ix - 6)
	ld	a, d
	ld	hl, 5033165
	ld	e, 61
	call	__fadd
	push	bc
	pop	hl
	ld	d, a
	ld	(_rotX), hl
	ld	(_rotX+3), a
BB12_10:
	ld	(ix - 6), hl
	ld	e, d
	ld	bc, -4194304
	ld	a, iyl
	call	__fcmp
	jp	m, BB12_12
	ld	iyl, 63
	ld	hl, -4194304
	ld	e, iyl
	ld	bc, (ix - 6)
	ld	a, d
	call	__fcmp
	jp	p, BB12_13
BB12_12:
	ld	hl, -4194304
	ld	(_rotX), hl
	ld	a, iyl
	ld	(_rotX+3), a
BB12_13:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	ld	iy, _camX
	lea	hl, iy + 3
	ld	(ix - 9), hl
	ld	iy, _camZ
	lea	hl, iy + 3
	ld	(ix - 6), hl
	jr	z, BB12_15
	ld	bc, (_rotY)
	ld	hl, (ix - 3)
	ld	e, (hl)
	push	de
	push	bc
	call	_sinf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camX)
	ld	hl, (ix - 9)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, 64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_camX), bc
	ld	(_camX+3), a
	ld	hl, (_rotY)
	ld	a, (_rotY+3)
	ld	e, a
	push	de
	push	hl
	call	_cosf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camZ)
	ld	hl, (ix - 6)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, 64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_camZ), bc
	ld	(_camZ+3), a
BB12_15:
	ld	hl, -720874
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB12_17
	ld	bc, (_rotY)
	ld	hl, (ix - 3)
	ld	e, (hl)
	push	de
	push	bc
	call	_sinf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camX)
	ld	hl, (ix - 9)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, -64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_camX), bc
	ld	(_camX+3), a
	ld	hl, (_rotY)
	ld	a, (_rotY+3)
	ld	e, a
	push	de
	push	hl
	call	_cosf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camZ)
	ld	hl, (ix - 6)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, -64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_camZ), bc
	ld	(_camZ+3), a
BB12_17:
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	z, BB12_19
	ld	bc, (_rotY)
	ld	hl, (ix - 3)
	ld	e, (hl)
	push	de
	push	bc
	call	_cosf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camX)
	ld	hl, (ix - 9)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, -64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_camX), bc
	ld	(_camX+3), a
	ld	hl, (_rotY)
	ld	a, (_rotY+3)
	ld	e, a
	push	de
	push	hl
	call	_sinf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camZ)
	ld	hl, (ix - 6)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, 64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_camZ), bc
	ld	(_camZ+3), a
BB12_19:
	ld	iy, _camY
	ld	hl, -720872
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	7, a
	jr	z, BB12_21
	ld	bc, (_rotY)
	ld	hl, (ix - 3)
	ld	e, (hl)
	push	de
	push	bc
	call	_cosf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camX)
	ld	hl, (ix - 9)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, 64
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_camX), bc
	ld	(_camX+3), a
	ld	hl, (_rotY)
	ld	a, (_rotY+3)
	ld	e, a
	push	de
	push	hl
	call	_sinf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	ld	iy, (_camZ)
	ld	hl, (ix - 6)
	ld	d, (hl)
	ld	hl, 2097152
	ld	e, -64
	call	__fmul
	lea	hl, iy
	ld	iy, _camY
	ld	e, d
	call	__fadd
	ld	(_camZ), bc
	ld	(_camZ+3), a
BB12_21:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	lea	iy, iy + 3
	jr	z, BB12_23
	ld	bc, (_camY)
	ld	a, (iy)
	ld	hl, 2097152
	ld	e, 64
	call	__fadd
	ld	(_camY), bc
	ld	(_camY+3), a
BB12_23:
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jr	z, BB12_25
	ld	bc, (_camY)
	ld	a, (iy)
	ld	hl, 2097152
	ld	e, -64
	call	__fadd
	ld	(_camY), bc
	ld	(_camY+3), a
BB12_25:
	ld	sp, ix
	pop	ix
	jp	_updateTransformCache
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_updateFPS
_updateFPS:
	ld	iy, 0
	ld	bc, (_updateFPS.framesThisSecond)
	inc	bc
	ld	(_updateFPS.framesThisSecond), bc
	ld	a, (-851968)
	ld	l, a
	ld	a, (_updateFPS.lastSecond)
	ld	e, a
	ld	a, l
	cp	a, e
	jr	z, BB13_2
	ld	(_currentFPS), bc
	ld	(_updateFPS.framesThisSecond), iy
	ld	a, l
	ld	(_updateFPS.lastSecond), a
BB13_2:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_updateTransformCache
_updateTransformCache:
	ld	iy, _rotX
	ld	de, (_rotX)
	lea	hl, iy + 3
	ld	l, (hl)
	push	hl
	push	de
	call	_sinf
	ld	a, e
	pop	de
	pop	de
	ld	(_sinRotX), hl
	ld	(_sinRotX+3), a
	ld	hl, (_rotX)
	ld	a, (_rotX+3)
	ld	e, a
	push	de
	push	hl
	call	_cosf
	ld	a, e
	pop	de
	pop	de
	ld	(_cosRotX), hl
	ld	(_cosRotX+3), a
	ld	de, (_rotY)
	ld	iy, _rotY
	lea	hl, iy + 3
	ld	l, (hl)
	push	hl
	push	de
	call	_sinf
	ld	a, e
	pop	de
	pop	de
	ld	(_sinRotY), hl
	ld	(_sinRotY+3), a
	ld	hl, (_rotY)
	ld	a, (_rotY+3)
	ld	e, a
	push	de
	push	hl
	call	_cosf
	ld	a, e
	pop	de
	pop	de
	ld	(_cosRotY), hl
	ld	(_cosRotY+3), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cubeInView
_cubeInView:
	call	__frameset0
	ld	a, 1
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_transform
_transform:
	ld	hl, -24
	call	__frameset
	ld	bc, (ix + 6)
	ld	iy, (ix + 12)
	ld	d, (ix + 15)
	ld	hl, (_camX)
	ld	a, (_camX+3)
	ld	e, a
	ld	a, (ix + 9)
	call	__fsub
	ld	(ix - 7), bc
	ld	(ix - 8), a
	ld	hl, (_camY)
	ld	a, (_camY+3)
	ld	e, a
	lea	bc, iy
	ld	a, d
	call	__fsub
	ld	(ix - 3), bc
	ld	(ix - 4), a
	ld	hl, (_camZ)
	ld	a, (_camZ+3)
	ld	e, a
	ld	bc, (ix + 18)
	ld	a, (ix + 21)
	call	__fsub
	ld	(ix - 19), bc
	ld	e, a
	ld	(ix - 20), e
	ld	hl, (_cosRotY)
	ld	(ix - 23), hl
	ld	a, (_cosRotY+3)
	ld	(ix - 24), a
	ld	hl, (_sinRotY)
	ld	(ix - 15), hl
	ld	a, (_sinRotY+3)
	ld	d, a
	ld	(ix - 16), d
	ld	a, e
	call	__fneg
	push	bc
	pop	iy
	ld	e, a
	push	hl
	pop	bc
	ld	a, d
	lea	hl, iy
	call	__fmul
	ld	(ix - 11), bc
	ld	(ix - 12), a
	ld	bc, (ix - 7)
	ld	a, (ix - 8)
	ld	iy, (ix - 23)
	lea	hl, iy
	ld	d, (ix - 24)
	ld	e, d
	call	__fmul
	ld	hl, (ix - 11)
	ld	e, (ix - 12)
	call	__fadd
	ld	(ix - 11), bc
	ld	(ix - 12), a
	ld	bc, (ix - 19)
	ld	a, (ix - 20)
	lea	hl, iy
	ld	e, d
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 7)
	ld	a, (ix - 8)
	ld	hl, (ix - 15)
	ld	e, (ix - 16)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(ix - 15), bc
	ld	e, a
	ld	(ix - 16), e
	ld	hl, (_cosRotX)
	ld	(ix - 23), hl
	ld	a, (_cosRotX+3)
	ld	(ix - 24), a
	ld	hl, (_sinRotX)
	ld	(ix - 7), hl
	ld	a, (_sinRotX+3)
	ld	d, a
	ld	(ix - 8), d
	ld	a, e
	call	__fneg
	push	bc
	pop	iy
	ld	e, a
	push	hl
	pop	bc
	ld	a, d
	lea	hl, iy
	call	__fmul
	ld	(ix - 19), bc
	ld	(ix - 20), a
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	ld	iy, (ix - 23)
	lea	hl, iy
	ld	d, (ix - 24)
	ld	e, d
	call	__fmul
	ld	hl, (ix - 19)
	ld	e, (ix - 20)
	call	__fadd
	ld	(ix - 19), bc
	ld	(ix - 20), a
	ld	bc, (ix - 15)
	ld	a, (ix - 16)
	lea	hl, iy
	ld	e, d
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 3)
	ld	a, (ix - 4)
	ld	hl, (ix - 7)
	ld	e, (ix - 8)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	iy, (ix + 24)
	ld	hl, (ix - 11)
	ld	(iy), hl
	ld	l, (ix - 12)
	ld	(iy + 3), l
	ld	iy, (ix + 27)
	ld	hl, (ix - 19)
	ld	(iy), hl
	ld	l, (ix - 20)
	ld	(iy + 3), l
	ld	iy, (ix + 30)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawCubeFace
_drawCubeFace:
	ld	hl, -239
	call	__frameset
	ld	bc, -174
	lea	iy, ix
	add	iy, bc
	ld	d, (ix + 9)
	ld	bc, (ix + 24)
	ld	e, 63
	ld	hl, ___const.drawCubeFace.indices
	ld	(ix - 3), bc
	push	ix
	ld	bc, -177
	add	ix, bc
	ld	(ix), hl
	pop	ix
	xor	a, a
	ld	bc, -225
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	lea	hl, ix - 102
	push	ix
	inc	bc
	add	ix, bc
	ld	(ix), hl
	pop	ix
	lea	hl, ix - 118
	push	ix
	ld	bc, -218
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -134
	lea	hl, ix
	add	hl, bc
	push	ix
	ld	bc, -221
	add	ix, bc
	ld	(ix), hl
	pop	ix
	lea	hl, iy + 24
	push	ix
	ld	bc, -201
	add	ix, bc
	ld	(ix), hl
	pop	ix
	lea	hl, iy + 12
	push	ix
	ld	bc, -236
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -198
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy
	ld	bc, -239
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, (ix + 27)
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	call	__fmul
	push	bc
	pop	hl
	ld	(ix - 3), bc
	push	ix
	ld	bc, -189
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	e, a
	ld	bc, (ix - 3)
	ld	bc, (ix + 6)
	ld	a, d
	ld	iyl, d
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -180
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -183
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	(ix - 102), bc
	ld	(ix - 99), a
	ld	bc, (ix + 12)
	ld	a, (ix + 15)
	ld	de, (ix - 3)
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -195
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -186
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	(ix - 98), bc
	ld	(ix - 95), a
	ld	bc, (ix + 18)
	ld	a, (ix + 21)
	ld	de, (ix - 3)
	ld	d, e
	ld	(ix - 3), bc
	push	ix
	ld	bc, -192
	add	ix, bc
	ld	(ix), d
	pop	ix
	ld	bc, (ix - 3)
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -214
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	(ix - 94), bc
	ld	(ix - 91), a
	push	hl
	pop	bc
	ld	de, (ix - 3)
	ld	a, d
	ld	hl, (ix + 6)
	ld	e, iyl
	call	__fadd
	ld	(ix - 3), de
	push	ix
	ld	de, -204
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	(ix - 90), bc
	ld	(ix - 87), a
	push	ix
	ld	de, -195
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	(ix - 86), hl
	ld	de, -186
	lea	hl, ix
	add	hl, de
	ld	l, (hl)
	ld	(ix - 83), l
	push	ix
	ld	de, -214
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld	(ix - 82), iy
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -215
	add	ix, bc
	ld	d, (ix)
	pop	ix
	ld	(ix - 79), d
	ld	bc, (ix - 3)
	ld	(ix - 78), bc
	ld	(ix - 75), a
	ld	(ix - 3), de
	push	ix
	ld	de, -189
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -192
	add	ix, de
	ld	a, (ix)
	pop	ix
	ld	hl, (ix + 12)
	ld	de, (ix - 3)
	ld	e, (ix + 15)
	call	__fadd
	ld	(ix - 3), de
	push	ix
	ld	de, -208
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -211
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	(ix - 74), bc
	ld	(ix - 71), a
	ld	(ix - 70), iy
	ld	de, (ix - 3)
	ld	(ix - 67), d
	ld	(ix - 3), bc
	push	ix
	ld	bc, -180
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(ix - 66), hl
	push	ix
	ld	bc, -183
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	(ix - 63), e
	ld	bc, (ix - 3)
	ld	(ix - 62), bc
	ld	(ix - 59), a
	ld	(ix - 58), iy
	ld	(ix - 55), d
	ld	(ix - 54), hl
	ld	(ix - 51), e
	ld	bc, -195
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(ix - 50), iy
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	d, (ix)
	pop	ix
	ld	(ix - 47), d
	ld	(ix - 3), de
	push	ix
	ld	de, -189
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -192
	add	ix, de
	ld	a, (ix)
	pop	ix
	ld	hl, (ix + 18)
	ld	de, (ix - 3)
	ld	e, (ix + 21)
	call	__fadd
	ld	(ix - 46), bc
	ld	(ix - 43), a
	ld	(ix - 3), bc
	push	ix
	ld	bc, -204
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(ix - 42), hl
	push	ix
	dec	bc
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	(ix - 39), e
	ld	(ix - 38), iy
	ld	(ix - 35), d
	ld	bc, (ix - 3)
	ld	(ix - 34), bc
	ld	(ix - 31), a
	ld	(ix - 30), hl
	ld	(ix - 27), e
	ld	de, -208
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(ix - 26), iy
	ld	(ix - 3), bc
	push	ix
	ld	bc, -211
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	(ix - 23), e
	ld	bc, (ix - 3)
	ld	(ix - 22), bc
	ld	(ix - 19), a
	ld	(ix - 3), bc
	push	ix
	ld	bc, -180
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	(ix - 18), hl
	ld	bc, -183
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	ld	(ix - 15), l
	ld	(ix - 14), iy
	ld	(ix - 11), e
	ld	bc, (ix - 3)
	ld	(ix - 10), bc
	ld	(ix - 7), a
	ld	hl, (ix + 30)
	ld	bc, 12
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	ld	bc, -177
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	add	hl, de
	push	ix
	ld	de, -177
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	ld	bc, 20
	ld	iy, 0
BB17_1:
	ld	de, -180
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	ld	de, 4
	add	iy, de
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jp	z, BB17_6
	ld	de, -211
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	ld	de, -177
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	ld	hl, (hl)
	ld	bc, 12
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -224
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	add	iy, de
	ld	hl, (iy)
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (iy + 3)
	ld	bc, -189
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	ld	hl, (iy + 4)
	push	ix
	ld	bc, -192
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (iy + 7)
	ld	bc, -205
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	ld	hl, (iy + 8)
	push	ix
	inc	bc
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (iy + 11)
	ld	bc, -218
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -180
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	ld	bc, (ix - 3)
	push	hl
	pop	bc
	ld	(ix - 3), de
	ld	de, -208
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	de, -221
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	add	hl, de
	ld	(ix - 3), bc
	push	ix
	ld	bc, -195
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -201
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	add	iy, de
	push	ix
	ld	de, -183
	add	ix, de
	ld	(ix), iy
	pop	ix
	push	iy
	push	hl
	ld	bc, (ix - 3)
	push	bc
	ld	e, a
	push	de
	ld	bc, -204
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	dec	bc
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	push	hl
	ld	bc, -192
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -189
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	push	hl
	ld	bc, -186
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_transform
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	ld	de, -208
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	hl, (iy)
	ld	a, (iy + 3)
	ld	iy, _debug_tx
	push	ix
	ld	de, -180
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	iy, bc
	ld	(iy), hl
	ld	(iy + 3), a
	ld	de, -195
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	hl, (iy)
	ld	d, (iy + 3)
	ld	iy, _debug_ty
	add	iy, bc
	ld	(ix - 3), bc
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	(iy), hl
	ld	(iy + 3), d
	ld	bc, -183
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy)
	ld	e, (iy + 3)
	ld	iy, _debug_tz
	ld	bc, (ix - 3)
	add	iy, bc
	ld	(iy), hl
	ld	(iy + 3), e
	ld	bc, -180
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	ix
	ld	bc, -183
	add	ix, bc
	ld	(ix), e
	pop	ix
	ld	bc, 0
	ld	a, 65
	call	__fcmp
	jp	m, BB17_22
	ld	bc, -183
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	push	hl
	ld	bc, -180
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -192
	lea	hl, ix
	add	hl, bc
	ld	(hl), d
	call	__isnanf
	ld	bc, -189
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	pop	hl
	ld	bc, -192
	lea	hl, ix
	add	hl, bc
	ld	l, (hl)
	push	hl
	ld	bc, -186
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_fabsf
	push	hl
	pop	iy
	ld	d, e
	pop	hl
	pop	hl
	ld	bc, -189
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB17_22
	ld	hl, 7995392
	ld	e, 68
	ld	(ix - 3), de
	push	ix
	ld	de, -180
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -183
	add	ix, de
	ld	a, (ix)
	pop	ix
	ld	de, (ix - 3)
	call	__fcmp
	jp	m, BB17_22
	lea	bc, iy
	ld	(ix - 3), bc
	ld	bc, -177
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 3
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	hl, -1048576
	ld	e, 66
	ld	a, d
	ld	bc, (ix - 3)
	call	__fcmp
	ld	bc, 20
	ld	(ix - 3), bc
	ld	bc, -211
	lea	iy, ix
	push	af
	add	iy, bc
	pop	af
	ld	iy, (iy)
	ld	bc, (ix - 3)
	jp	p, BB17_1
	jp	BB17_22
BB17_6:
	ld	bc, -198
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 24)
	ld	a, (iy + 27)
	ld	bc, 16
	ld	(ix - 3), bc
	ld	bc, -177
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	iyl, a
	push	ix
	ld	bc, -192
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -183
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -195
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	ld	bc, (ix - 3)
BB17_7:
	ld	(ix - 3), bc
	ld	bc, -180
	lea	hl, ix
	add	hl, bc
	push	af
	ld	a, iyl
	ld	(hl), a
	pop	af
	push	de
	pop	hl
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	bc, -215
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	(hl), a
	jp	z, BB17_21
	ld	bc, -189
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	bc, -201
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	add	iy, de
	ld	hl, (iy)
	ld	d, (iy + 3)
	ld	e, d
	ld	(ix - 3), de
	ld	de, -183
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	bc
	pop	iy
	ld	de, (ix - 3)
	call	__fcmp
	ld	a, 1
	jp	m, BB17_10
	ld	a, 0
BB17_10:
	bit	0, a
	push	ix
	ld	bc, -186
	push	af
	add	ix, bc
	pop	af
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -180
	push	af
	add	ix, bc
	pop	af
	ld	e, (ix)
	pop	ix
	push	hl
	pop	bc
	jr	nz, BB17_12
	ld	(ix - 3), bc
	ld	bc, -186
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, (ix - 3)
BB17_12:
	bit	0, a
	ld	a, d
	jr	nz, BB17_14
	ld	(ix - 3), bc
	ld	bc, -215
	lea	hl, ix
	add	hl, bc
	ld	a, (hl)
	ld	bc, (ix - 3)
BB17_14:
	ld	(ix - 3), de
	ld	de, -204
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	ld	de, -177
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	ix
	ld	de, -183
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	de, (ix - 3)
	ld	a, d
	call	__fcmp
	ld	a, 1
	ld	(ix - 3), bc
	push	ix
	ld	bc, -189
	push	af
	add	ix, bc
	pop	af
	ld	iy, (ix)
	pop	ix
	ld	bc, (ix - 3)
	jp	m, BB17_16
	ld	a, 0
BB17_16:
	bit	0, a
	ld	bc, 4
	jr	nz, BB17_18
	ld	(ix - 3), bc
	ld	bc, -177
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -183
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
BB17_18:
	bit	0, a
	jr	nz, BB17_20
	ld	d, e
BB17_20:
	add	iy, bc
	ld	a, d
	lea	de, iy
	ld	bc, -183
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -177
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	iyl, a
	ld	bc, -186
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -183
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -204
	lea	hl, ix
	add	hl, bc
	ld	a, (hl)
	ld	bc, 16
	jp	BB17_7
BB17_21:
	ld	bc, (ix - 114)
	ld	hl, (ix - 118)
	ld	de, -208
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	d, (ix - 115)
	ld	a, (ix - 111)
	ld	e, d
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -186
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -189
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -130
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -134
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -224
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -131
	add	ix, bc
	ld	e, (ix)
	pop	ix
	push	ix
	ld	bc, -232
	add	ix, bc
	ld	(ix), e
	pop	ix
	ld	a, (ix - 127)
	ld	bc, (ix - 3)
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -204
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -198
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld	bc, (iy + 28)
	ld	a, (iy + 31)
	push	ix
	ld	de, -192
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -195
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -211
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -214
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	bc, (ix - 110)
	ld	a, (ix - 107)
	push	ix
	ld	de, -208
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	ld	e, d
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -228
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	bc, (ix - 126)
	ld	a, (ix - 123)
	push	ix
	ld	de, -224
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -232
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fsub
	ld	(ix - 3), de
	push	ix
	ld	de, -208
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	de, (ix - 3)
	ld	d, a
	ld	(ix - 3), bc
	push	ix
	ld	bc, -224
	add	ix, bc
	ld	(ix), d
	pop	ix
	ld	bc, (ix - 3)
	ld	bc, (iy + 32)
	ld	a, (iy + 35)
	ld	(ix - 3), bc
	ld	bc, -192
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	ix
	ld	bc, -195
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fsub
	push	bc
	pop	iy
	ld	(ix - 3), de
	push	ix
	ld	de, -232
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -211
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -214
	add	ix, de
	ld	a, (ix)
	pop	ix
	call	__fneg
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	e, a
	ld	(ix - 3), de
	push	ix
	ld	de, -208
	add	ix, de
	ld	bc, (ix)
	pop	ix
	ld	de, (ix - 3)
	ld	a, d
	call	__fmul
	ld	(ix - 3), de
	push	ix
	ld	de, -192
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -195
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -204
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	a, (ix)
	pop	ix
	lea	hl, iy
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -232
	add	ix, bc
	ld	d, (ix)
	pop	ix
	ld	e, d
	ld	bc, (ix - 3)
	call	__fmul
	ld	(ix - 3), bc
	push	ix
	ld	bc, -192
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	bc, -195
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fadd
	ld	(ix - 3), de
	push	ix
	ld	de, -192
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -195
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -186
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -189
	add	ix, de
	ld	a, (ix)
	pop	ix
	call	__fneg
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	e, a
	lea	bc, iy
	ld	a, d
	call	__fmul
	ld	(ix - 3), de
	ld	de, -232
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	dec	de
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -211
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -214
	add	ix, de
	ld	a, (ix)
	pop	ix
	push	ix
	ld	de, -228
	add	ix, de
	ld	iy, (ix)
	pop	ix
	lea	hl, iy
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -229
	add	ix, bc
	ld	d, (ix)
	pop	ix
	ld	e, d
	ld	bc, (ix - 3)
	call	__fmul
	ld	(ix - 3), bc
	push	ix
	ld	bc, -232
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	ix
	dec	bc
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fadd
	ld	(ix - 3), de
	push	ix
	ld	de, -211
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -214
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -204
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	a, (ix)
	pop	ix
	call	__fneg
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	e, a
	lea	bc, iy
	ld	a, d
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	(ix - 3), de
	push	ix
	ld	de, -186
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -189
	add	ix, de
	ld	a, (ix)
	pop	ix
	push	ix
	ld	de, -208
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	de, (ix - 3)
	ld	(ix - 3), bc
	push	ix
	ld	bc, -224
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	(ix - 3), de
	push	ix
	ld	de, -211
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -214
	add	ix, de
	ld	a, (ix)
	pop	ix
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	e, a
	call	__fmul
	ld	(ix - 3), de
	push	ix
	ld	de, -186
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -189
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -192
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -195
	add	ix, de
	ld	a, (ix)
	pop	ix
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	e, a
	call	__fmul
	ld	(ix - 3), bc
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	bc, -189
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fadd
	ld	(ix - 3), de
	push	ix
	ld	de, -186
	add	ix, de
	ld	(ix), bc
	pop	ix
	push	ix
	ld	de, -189
	add	ix, de
	ld	(ix), a
	pop	ix
	lea	bc, iy
	ld	de, (ix - 3)
	ld	a, d
	ld	(ix - 3), bc
	push	ix
	ld	bc, -192
	add	ix, bc
	ld	(ix), iy
	pop	ix
	lea	hl, iy
	ld	bc, -195
	lea	iy, ix
	add	iy, bc
	ld	(iy), d
	ld	e, d
	ld	bc, (ix - 3)
	call	__fmul
	ld	(ix - 3), bc
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	bc, -189
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, (ix - 3)
	call	__fadd
	ld	l, a
	push	hl
	push	bc
	call	_sqrtf
	pop	bc
	pop	bc
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jr	nz, BB17_23
BB17_22:
	ld	sp, ix
	pop	ix
	ret
BB17_23:
	ld	bc, -189
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	(ix), e
	pop	ix
	push	ix
	ld	bc, -192
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	lea	bc, iy
	ld	(ix - 3), bc
	push	ix
	ld	bc, -195
	add	ix, bc
	ld	d, (ix)
	pop	ix
	ld	a, d
	ld	bc, (ix - 3)
	call	__fneg
	call	__fdiv
	ld	l, a
	ld	(_debug_nz), iy
	ld	a, d
	ld	(_debug_nz+3), a
	ld	(ix - 3), de
	push	ix
	ld	de, -204
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	(_debug_dot), bc
	push	ix
	dec	de
	add	ix, de
	ld	(ix), l
	pop	ix
	ld	a, l
	ld	(_debug_dot+3), a
	push	ix
	ld	de, -183
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	(_debug_min_tz), hl
	ld	de, -215
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	ld	(_debug_min_tz+3), a
	push	ix
	ld	de, -177
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	(_debug_max_tz), hl
	ld	de, -180
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	ld	(_debug_max_tz+3), a
	push	ix
	ld	de, -189
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	(_debug_mag), hl
	ld	de, -186
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	ld	(_debug_mag+3), a
	lea	bc, iy
	ld	de, (ix - 3)
	ld	a, d
	call	__ftol
	push	bc
	pop	de
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	iy
	add	iy, iy
	push	hl
	pop	iy
	sbc	hl, hl
	lea	bc, iy
	ld	a, l
	call	__ltof
	ld	(_debug_area), bc
	ld	(_debug_area+3), a
	ld	hl, 1851392
	ld	e, 70
	ld	(ix - 3), de
	push	ix
	ld	de, -189
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -186
	add	ix, de
	ld	a, (ix)
	pop	ix
	ld	de, (ix - 3)
	call	__fcmp
	jp	p, BB17_26
	ld	bc, -204
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	dec	bc
	add	ix, bc
	ld	e, (ix)
	pop	ix
	ld	bc, 2348810
	ld	a, 60
	call	__fcmp
	jp	p, BB17_26
	ld	de, 100
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	c, BB17_22
BB17_26:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
BB17_27:
	push	bc
	pop	iy
	ld	de, 3
	add	iy, de
	lea	hl, iy
	ld	de, 15
	or	a, a
	sbc	hl, de
	jp	z, BB17_34
	ld	de, -180
	lea	hl, ix
	add	hl, de
	ld	(hl), iy
	ld	de, -201
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	hl, (iy)
	ld	d, (iy + 3)
	push	hl
	pop	iy
	ld	e, d
	ld	(ix - 3), de
	push	ix
	ld	de, -177
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	bc, 0
	ld	a, 64
	ld	de, (ix - 3)
	call	__fcmp
	jp	m, BB17_22
	ld	hl, 7995392
	ld	e, 68
	lea	bc, iy
	ld	a, d
	call	__fcmp
	jp	m, BB17_22
	ld	l, d
	push	hl
	push	iy
	ld	bc, -183
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -186
	lea	iy, ix
	add	iy, bc
	ld	(iy), d
	call	__isnanf
	ld	de, -183
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	push	ix
	ld	de, -177
	add	ix, de
	ld	bc, (ix)
	pop	ix
	pop	de
	pop	de
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	e, (ix)
	pop	ix
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB17_22
	ld	bc, -8388608
	ld	a, 63
	lea	hl, iy
	call	__fdiv
	ld	(ix - 3), de
	ld	de, -183
	lea	iy, ix
	add	iy, de
	ld	(iy), bc
	push	ix
	ld	de, -186
	add	ix, de
	ld	(ix), a
	pop	ix
	push	ix
	ld	de, -218
	add	ix, de
	ld	iy, (ix)
	pop	ix
	ld	hl, (iy)
	ld	de, (ix - 3)
	ld	e, (iy + 3)
	call	__fmul
	ld	e, a
	ld	hl, (_playerFOV)
	ld	(ix - 3), bc
	ld	bc, -192
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	a, (_playerFOV+3)
	ld	d, a
	ld	a, e
	ld	e, d
	ld	bc, (ix - 3)
	call	__fmul
	ld	hl, 2097152
	ld	e, 67
	call	__fadd
	call	__ftol
	push	bc
	pop	iy
	ld	(ix - 3), de
	push	ix
	ld	de, -189
	add	ix, de
	ld	(ix), iy
	pop	ix
	push	ix
	ld	de, -236
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -177
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	hl, bc
	ld	(hl), iy
	ld	de, -221
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	bc, (iy)
	ld	a, (iy + 3)
	call	__fneg
	push	bc
	pop	hl
	ld	de, (ix - 3)
	ld	e, a
	ld	(ix - 3), de
	ld	de, -183
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	ix
	ld	de, -186
	add	ix, de
	ld	a, (ix)
	pop	ix
	ld	de, (ix - 3)
	call	__fmul
	ld	(ix - 3), bc
	push	ix
	ld	bc, -192
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	e, d
	ld	bc, (ix - 3)
	call	__fmul
	ld	hl, -1048576
	ld	e, 66
	call	__fadd
	call	__ftol
	ld	(ix - 3), bc
	push	ix
	ld	bc, -239
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	bc, -177
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ld	bc, (ix - 3)
	ld	(hl), bc
	ld	de, -337
	ld	(ix - 3), bc
	ld	bc, -189
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld	de, -353
	or	a, a
	sbc	hl, de
	ld	bc, (ix - 3)
	jp	c, BB17_22
	push	bc
	pop	hl
	ld	de, -16
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB17_22
	ld	de, -201
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	lea	iy, iy + 4
	push	ix
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	de, -218
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	iy, iy + 4
	push	ix
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	de, -221
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	iy, iy + 4
	push	ix
	add	ix, de
	ld	(ix), iy
	pop	ix
	push	bc
	pop	hl
	ld	de, 257
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	de, -180
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	jp	m, BB17_27
	jp	BB17_22
BB17_34:
	ld	a, (_cursorBlockValid)
	bit	0, a
	jr	z, BB17_39
	ld	hl, (_cursorBlockX)
	ld	de, (ix + 36)
	or	a, a
	sbc	hl, de
	jr	nz, BB17_39
	ld	hl, (_cursorBlockY)
	ld	de, (ix + 39)
	or	a, a
	sbc	hl, de
	jr	nz, BB17_39
	ld	hl, (_cursorBlockZ)
	ld	de, (ix + 42)
	or	a, a
	sbc	hl, de
	jr	nz, BB17_39
	ld	a, (-851968)
	and	a, 1
	xor	a, 1
	ld	bc, -225
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
BB17_39:
	ld	bc, -198
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 15)
	ld	de, (iy + 12)
	push	ix
	ld	bc, -177
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -204
	add	ix, bc
	ld	(ix), hl
	pop	ix
	or	a, a
	sbc	hl, de
	push	ix
	ld	bc, -186
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 3)
	push	ix
	ld	bc, -180
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	de, (iy)
	push	de
	pop	hl
	ld	(ix - 3), de
	push	ix
	ld	de, -180
	add	ix, de
	ld	bc, (ix)
	pop	ix
	or	a, a
	sbc	hl, bc
	push	ix
	ld	de, -183
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 18)
	push	ix
	ld	de, -192
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	ix
	ld	de, -177
	add	ix, de
	ld	bc, (ix)
	pop	ix
	or	a, a
	sbc	hl, bc
	push	ix
	ld	bc, -189
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (iy + 6)
	ld	bc, -201
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, (ix - 3)
	push	ix
	ld	bc, -195
	add	ix, bc
	ld	(ix), de
	pop	ix
	or	a, a
	sbc	hl, de
	push	ix
	ld	de, -186
	add	ix, de
	ld	bc, (ix)
	pop	ix
	call	__imulu
	push	hl
	pop	iy
	push	ix
	ld	de, -189
	add	ix, de
	ld	hl, (ix)
	pop	ix
	push	ix
	ld	de, -183
	add	ix, de
	ld	bc, (ix)
	pop	ix
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy
	lea	de, iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	de, 30001
	or	a, a
	sbc	hl, de
	jp	nc, BB17_22
	ld	bc, -225
	lea	hl, ix
	add	hl, bc
	bit	0, (hl)
	jr	z, BB17_42
	ld	hl, -2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -201
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -192
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -180
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -204
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -195
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -177
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_FillTriangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, -2
	jp	BB17_43
BB17_42:
	ld	bc, 12
	ld	hl, (ix + 33)
	call	__imulu
	push	hl
	pop	de
	ld	hl, _texture_colors
	push	hl
	pop	iy
	add	iy, de
	ld	c, 1
	ld	hl, (ix + 30)
	call	__ishl
	push	hl
	pop	de
	add	iy, de
	push	ix
	ld	de, -183
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	l, (iy)
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -201
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -192
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -180
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -204
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -195
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -177
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_FillTriangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -183
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	l, (iy + 1)
BB17_43:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, -198
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	hl, (iy + 21)
	ld	de, (iy + 9)
	ld	(ix - 3), de
	ld	de, -195
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	bc
	push	ix
	ld	de, -177
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	bc
	ld	de, (ix - 3)
	push	de
	push	hl
	ld	bc, -201
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -192
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_FillTriangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	jp	BB17_22
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawSkybox
_drawSkybox:
	ld	hl, -97
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 80
	push	hl
	ld	hl, 320
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 127
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 80
	push	de
	ld	hl, 320
	push	hl
	push	de
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 95
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 80
	push	hl
	ld	hl, 320
	push	hl
	ld	hl, 160
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_updateCursorTarget
_updateCursorTarget:
	ld	hl, -83
	call	__frameset
	xor	a, a
	scf
	sbc	hl, hl
	ld	iy, _rotX
	ld	(_cursorBlockValid), a
	ld	(_cursorBlockFace), hl
	ld	hl, (_sinRotY)
	ld	(ix - 18), hl
	ld	a, (_sinRotY+3)
	ld	(ix - 21), a
	ld	bc, (_rotX)
	lea	hl, iy + 3
	ld	(ix - 15), hl
	ld	e, (hl)
	push	de
	push	bc
	call	_cosf
	pop	bc
	pop	bc
	ld	bc, (ix - 18)
	ld	a, (ix - 21)
	call	__fmul
	ld	(ix - 24), bc
	ld	l, a
	ld	(ix - 21), hl
	ld	bc, (_rotX)
	ld	hl, (ix - 15)
	ld	e, (hl)
	push	de
	push	bc
	call	_sinf
	ld	(ix - 27), hl
	ld	(ix - 30), de
	pop	hl
	pop	hl
	ld	hl, (_cosRotY)
	ld	(ix - 15), hl
	ld	a, (_cosRotY+3)
	ld	(ix - 18), a
	ld	hl, (_rotX)
	ld	a, (_rotX+3)
	ld	e, a
	push	de
	push	hl
	call	_cosf
	pop	bc
	pop	bc
	ld	bc, (ix - 15)
	ld	a, (ix - 18)
	call	__fmul
	ld	(ix - 18), bc
	ld	l, a
	ld	(ix - 15), hl
	ld	hl, (_camX)
	ld	(ix - 33), hl
	ld	a, (_camX+3)
	ld	(ix - 34), a
	ld	hl, (_camY)
	ld	(ix - 37), hl
	ld	a, (_camY+3)
	ld	(ix - 38), a
	ld	hl, (_camZ)
	ld	(ix - 41), hl
	ld	a, (_camZ+3)
	ld	(ix - 42), a
	ld	bc, (_renderDistance)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	ld	e, 66
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix - 24)
	ld	hl, (ix - 21)
	ld	a, l
	ld	hl, 786432
	call	__fmul
	ld	(ix - 59), bc
	ld	(ix - 60), a
	ld	bc, (ix - 27)
	ld	hl, (ix - 30)
	ld	a, l
	ld	hl, 786432
	call	__fmul
	ld	(ix - 63), bc
	ld	(ix - 64), a
	ld	bc, (ix - 18)
	ld	hl, (ix - 15)
	ld	a, l
	ld	hl, 786432
	call	__fmul
	ld	(ix - 67), bc
	ld	(ix - 68), a
	ld	bc, 0
	xor	a, a
	ld	(ix - 56), d
BB19_1:
	lea	hl, iy
	ld	e, d
	ld	(ix - 54), bc
	ld	(ix - 55), a
	call	__fcmp
	jp	m, BB19_21
	ld	(ix - 83), iy
	ld	bc, (ix - 33)
	ld	a, (ix - 34)
	ld	hl, 786432
	ld	d, 66
	ld	e, d
	call	__fdiv
	call	__ftol
	ld	(ix - 45), bc
	ld	bc, (ix - 37)
	ld	a, (ix - 38)
	call	__fdiv
	call	__ftol
	ld	(ix - 48), bc
	ld	bc, (ix - 41)
	ld	a, (ix - 42)
	call	__fdiv
	call	__ftol
	ld	(ix - 51), bc
	ld	hl, (ix - 45)
	push	hl
	pop	iy
	push	hl
	pop	bc
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	call	__fmul
	ld	hl, -7602176
	ld	e, 65
	ld	d, e
	call	__fadd
	ld	(ix - 71), bc
	ld	l, a
	ld	(ix - 74), hl
	ld	bc, (ix - 48)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	inc	e
	call	__fmul
	ld	hl, -7602176
	ld	e, d
	call	__fadd
	ld	(ix - 77), bc
	ld	l, a
	ld	(ix - 80), hl
	ld	hl, (ix - 51)
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	ld	e, 66
	call	__fmul
	ld	hl, -7602176
	ld	e, d
	call	__fadd
	ld	l, a
	pea	ix - 12
	pea	ix - 8
	pea	ix - 4
	push	hl
	push	bc
	ld	hl, (ix - 80)
	push	hl
	ld	hl, (ix - 77)
	push	hl
	ld	hl, (ix - 74)
	push	hl
	ld	hl, (ix - 71)
	push	hl
	call	_transform
	ld	iy, (ix - 45)
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	lea	hl, iy
	ld	bc, 16
	or	a, a
	sbc	hl, bc
	jp	nc, BB19_21
	ld	hl, (ix - 48)
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB19_21
	ld	hl, (ix - 48)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB19_21
	ld	hl, (ix - 51)
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB19_21
	ld	hl, (ix - 51)
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	p, BB19_21
	lea	hl, iy
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	lea	de, iy
	ld	iy, _world
	add	iy, bc
	ld	hl, (ix - 48)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix - 51)
	add	iy, bc
	ld	a, (iy)
	or	a, a
	jr	nz, BB19_9
	ld	bc, (ix - 59)
	ld	a, (ix - 60)
	ld	iy, 0
	lea	hl, iy
	ld	d, 63
	ld	e, d
	call	__fmul
	ld	hl, (ix - 33)
	ld	e, (ix - 34)
	call	__fadd
	ld	(ix - 33), bc
	ld	(ix - 34), a
	ld	bc, (ix - 63)
	ld	a, (ix - 64)
	lea	hl, iy
	ld	e, d
	call	__fmul
	ld	hl, (ix - 37)
	ld	e, (ix - 38)
	call	__fadd
	ld	(ix - 37), bc
	ld	(ix - 38), a
	ld	bc, (ix - 67)
	ld	a, (ix - 68)
	lea	hl, iy
	ld	e, d
	call	__fmul
	ld	hl, (ix - 41)
	ld	e, (ix - 42)
	call	__fadd
	ld	(ix - 41), bc
	ld	(ix - 42), a
	ld	bc, (ix - 54)
	ld	a, (ix - 55)
	ld	hl, -7602176
	ld	e, 65
	call	__fadd
	ld	iy, (ix - 83)
	ld	d, (ix - 56)
	jp	BB19_1
BB19_9:
	ld	(_cursorBlockX), de
	ld	hl, (ix - 48)
	ld	(_cursorBlockY), hl
	ld	(_cursorBlockZ), bc
	ld	a, 1
	ld	(_cursorBlockValid), a
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 24)
	push	hl
	call	_fabsf
	ld	(ix - 37), hl
	ld	(ix - 38), e
	pop	hl
	pop	hl
	ld	hl, (ix - 30)
	push	hl
	ld	hl, (ix - 27)
	push	hl
	call	_fabsf
	ld	(ix - 33), hl
	ld	(ix - 34), e
	pop	hl
	pop	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 18)
	push	hl
	call	_fabsf
	ld	(ix - 41), hl
	ld	(ix - 42), e
	pop	hl
	pop	hl
	ld	hl, (ix - 33)
	ld	e, (ix - 34)
	ld	bc, (ix - 37)
	push	bc
	pop	iy
	ld	a, (ix - 38)
	ld	d, a
	call	__fcmp
	jp	p, BB19_13
	ld	hl, (ix - 41)
	ld	e, (ix - 42)
	lea	bc, iy
	ld	a, d
	call	__fcmp
	jp	p, BB19_13
	or	a, a
	sbc	hl, hl
	ld	e, h
	ld	bc, (ix - 24)
	ld	iy, (ix - 21)
	ld	a, iyl
	call	__fcmp
	jp	p, BB19_19
	ld	hl, 0
	jr	BB19_20
BB19_13:
	lea	hl, iy
	ld	e, d
	ld	bc, (ix - 33)
	ld	a, (ix - 34)
	call	__fcmp
	jp	p, BB19_17
	ld	hl, (ix - 41)
	ld	e, (ix - 42)
	call	__fcmp
	jp	p, BB19_17
	or	a, a
	sbc	hl, hl
	ld	e, h
	ld	bc, (ix - 27)
	ld	iy, (ix - 30)
	ld	a, iyl
	call	__fcmp
	ld	hl, 2
	jp	m, BB19_20
	ld	hl, 3
	jr	BB19_20
BB19_17:
	or	a, a
	sbc	hl, hl
	ld	e, h
	ld	bc, (ix - 18)
	ld	iy, (ix - 15)
	ld	a, iyl
	call	__fcmp
	ld	hl, 4
	jp	m, BB19_20
	ld	hl, 5
	jr	BB19_20
BB19_19:
	ld	hl, 1
BB19_20:
	ld	(_cursorBlockFace), hl
BB19_21:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_drawWorld
_drawWorld:
	ld	hl, -66
	call	__frameset
	call	_updateTransformCache
	xor	a, a
	ld	(_cursorBlockValid), a
	ld	hl, -3670016
	ld	(_closestCursorDot), hl
	ld	a, -62
	ld	(_closestCursorDot+3), a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 2
	push	hl
	ld	hl, 80
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.71
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_camX)
	ld	iy, _camX
	lea	hl, iy + 3
	ld	a, (hl)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.1.72
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_camY)
	ld	iy, _camY
	lea	hl, iy + 3
	ld	a, (hl)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.1.72
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_camZ)
	ld	iy, _camZ
	lea	hl, iy + 3
	ld	a, (hl)
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	ld	hl, 220
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.2.73
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_rotX)
	ld	a, (_rotX+3)
	ld	hl, -3670016
	ld	e, 66
	call	__fmul
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, _.str.1.72
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	bc, (_rotY)
	ld	a, (_rotY+3)
	ld	hl, -3670016
	ld	e, 66
	call	__fmul
	call	__ftol
	ld	hl, 3
	push	hl
	push	bc
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	call	_updateCursorTarget
	ld	hl, 4800
	push	hl
	ld	hl, 6400
	push	hl
	ld	hl, -4800
	push	hl
	ld	hl, -6400
	push	hl
	call	_gfx_SetClipRegion
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (_camX)
	ld	a, (_camX+3)
	ld	hl, 786432
	ld	e, 66
	call	__fdiv
	call	__ftol
	ld	(ix - 9), bc
	ld	bc, (_camY)
	ld	a, (_camY+3)
	call	__fdiv
	call	__ftol
	ld	(ix - 3), bc
	ld	bc, (_camZ)
	ld	a, (_camZ+3)
	call	__fdiv
	call	__ftol
	ld	(ix - 18), bc
	ld	de, (_renderDistance)
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	(ix - 6), de
	push	de
	pop	iy
	ld	de, (ix - 3)
	add	iy, de
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB20_2
	ld	bc, 0
BB20_2:
	ld	(ix - 39), bc
	ld	hl, _faceVisible
	ld	(ix - 12), hl
	ld	hl, _anyFaceVisible
	ld	(ix - 15), hl
	ld	bc, 15
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB20_4
	ld	iy, 15
BB20_4:
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, (ix - 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 3), hl
	ex	de, hl
	ld	bc, 1536
	call	__imulu
	lea	de, iy
	ld	(ix - 27), de
	push	hl
	pop	iy
	ex	de, hl
	ld	bc, 96
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 18)
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 6)
	ld	bc, 1536
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	ld	a, 8
	ld	hl, (ix - 9)
	ld	c, a
	call	__ishl
	push	hl
	pop	iy
	ld	c, 4
	ld	hl, (ix - 27)
	call	__ishl
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 6)
	ld	c, a
	call	__ishl
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	iy, _world
	lea	hl, iy
	add	hl, de
	ld	(ix - 24), hl
	ld	hl, (ix - 15)
	add	hl, de
	ld	(ix - 15), hl
	ld	bc, (ix - 9)
	ld	iy, (ix - 6)
	ld	(ix - 33), iy
	or	a, a
	sbc	hl, hl
	ld	(ix - 30), hl
BB20_5:
	lea	hl, iy
	add	hl, bc
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB20_30
	ld	(ix - 21), iy
	ld	hl, (ix - 3)
	ld	bc, 16
	or	a, a
	sbc	hl, bc
	jr	c, BB20_8
	ld	hl, (ix - 12)
	ld	bc, 256
	ld	iy, (ix - 24)
	jp	BB20_29
BB20_8:
	ld	hl, (ix - 18)
	ld	de, (ix - 21)
	or	a, a
	sbc	hl, de
	ld	(ix - 36), hl
	ld	iy, (ix - 3)
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	call	__imulu
	ld	(ix - 42), hl
	lea	hl, iy
	lea	bc, iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	ld	e, 66
	call	__fmul
	ld	hl, -7602176
	dec	e
	call	__fadd
	ld	(ix - 45), bc
	ld	l, a
	ld	(ix - 48), hl
	ld	hl, (ix - 21)
	ld	bc, -6
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 21), hl
	ld	de, (ix - 36)
	ld	iy, (ix - 33)
BB20_9:
	lea	hl, iy
	ld	bc, (ix - 18)
	add	hl, bc
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB20_28
	push	de
	pop	hl
	push	de
	pop	bc
	ld	de, 16
	or	a, a
	sbc	hl, de
	jr	c, BB20_12
	push	bc
	pop	de
	jr	BB20_14
BB20_12:
	ld	(ix - 36), bc
	push	bc
	pop	hl
	ld	de, (ix - 18)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	call	__imulu
	ld	de, (ix - 42)
	add	hl, de
	ex	de, hl
	lea	hl, iy
	lea	bc, iy
	call	__imulu
	or	a, a
	sbc	hl, de
	jr	nc, BB20_16
BB20_13:
	ld	de, (ix - 36)
BB20_14:
	ld	iy, (ix - 21)
BB20_15:
	inc	de
	lea	iy, iy + 6
	ld	(ix - 21), iy
	ld	iy, (ix - 6)
	jr	BB20_9
BB20_16:
	ld	hl, (ix - 15)
	ld	(ix - 51), hl
	ld	hl, (ix - 24)
	ld	(ix - 33), hl
	ld	iy, (ix - 21)
	ld	(ix - 54), iy
	ld	bc, (ix - 27)
BB20_17:
	push	bc
	pop	hl
	ld	de, (ix - 39)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB20_21
	ld	(ix - 57), bc
	ld	iy, (ix - 33)
	ld	de, (ix - 36)
	add	iy, de
	ld	l, (iy)
	ld	a, l
	or	a, a
	jr	z, BB20_20
	ld	iy, (ix - 51)
	add	iy, de
	bit	0, (iy)
	jr	nz, BB20_22
BB20_20:
	ld	bc, (ix - 57)
	dec	bc
	ld	iy, (ix - 54)
	lea	iy, iy - 96
	ld	(ix - 54), iy
	ld	iy, (ix - 33)
	lea	iy, iy - 16
	ld	(ix - 33), iy
	ld	iy, (ix - 51)
	lea	iy, iy - 16
	ld	(ix - 51), iy
	ld	iy, (ix - 21)
	jr	BB20_17
BB20_21:
	ld	de, (ix - 36)
	jr	BB20_15
BB20_22:
	ld	de, 0
	ld	e, l
	ld	(ix - 6), de
	ld	bc, (ix - 57)
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	ld	d, 66
	ld	e, d
	call	__fmul
	ld	hl, -7602176
	ld	e, 65
	call	__fadd
	ld	(ix - 51), bc
	ld	l, a
	ld	(ix - 60), hl
	ld	hl, (ix - 36)
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	hl, 786432
	ld	e, d
	call	__fmul
	ld	hl, -7602176
	ld	e, 65
	call	__fadd
	ld	(ix - 63), bc
	ld	bc, (ix - 18)
	ld	l, a
	ld	(ix - 66), hl
	ld	hl, (ix - 6)
	dec	hl
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	ex	de, hl
BB20_23:
	ld	(ix - 33), de
	ex	de, hl
	ld	de, 6
	or	a, a
	sbc	hl, de
	jr	z, BB20_27
	ld	iy, (ix - 54)
	ld	de, (ix - 33)
	add	iy, de
	bit	0, (iy)
	jr	z, BB20_26
	ld	hl, (ix - 36)
	push	hl
	ld	hl, (ix - 57)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	push	de
	ld	hl, 66
	push	hl
	ld	hl, 786432
	push	hl
	ld	hl, (ix - 66)
	push	hl
	ld	hl, (ix - 63)
	push	hl
	ld	hl, (ix - 60)
	push	hl
	ld	hl, (ix - 51)
	push	hl
	ld	hl, (ix - 48)
	push	hl
	ld	hl, (ix - 45)
	push	hl
	call	_drawCubeFace
	ld	de, (ix - 33)
	ld	bc, (ix - 18)
	ld	hl, 39
	add	hl, sp
	ld	sp, hl
BB20_26:
	inc	de
	jr	BB20_23
BB20_27:
	ld	hl, (ix - 30)
	inc	hl
	ld	(ix - 30), hl
	ld	hl, (_renderDistance)
	ld	(ix - 6), hl
	jp	BB20_13
BB20_28:
	ld	(ix - 33), iy
	ld	(ix - 21), iy
	ld	hl, (ix - 12)
	ld	iy, (ix - 24)
	ld	bc, 256
BB20_29:
	ld	de, (ix - 3)
	inc	de
	ld	(ix - 3), de
	ld	de, 1536
	add	hl, de
	ld	(ix - 12), hl
	add	iy, bc
	ld	(ix - 24), iy
	ld	hl, (ix - 15)
	add	hl, bc
	ld	(ix - 15), hl
	ld	iy, (ix - 21)
	ld	bc, (ix - 9)
	jp	BB20_5
BB20_30:
	ld	hl, 220
	push	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, _.str.3.74
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 3
	push	hl
	ld	hl, (ix - 30)
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, _.str.4.75
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (_currentFPS)
	ld	de, 2
	push	de
	push	hl
	call	_gfx_PrintInt
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_load_texture_appvar
_load_texture_appvar:
	ld	hl, -18
	call	__frameset
	ld	hl, _.str.80
	ld	de, _.str.1.81
	push	de
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jp	z, BB21_10
	ld	hl, 2
	ld	bc, _texture_colors
	ld	(ix - 6), bc
	push	de
	ld	bc, 0
	push	bc
	push	hl
	ld	(ix - 3), de
	call	_ti_Seek
	pop	hl
	pop	hl
	pop	hl
	ld	de, 4
	ld	iy, 0
	lea	hl, iy
BB21_2:
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, de
	jr	z, BB21_9
BB21_3:
	lea	hl, iy
	ld	bc, 6
	or	a, a
	sbc	hl, bc
	jr	z, BB21_8
	ld	(ix - 15), iy
	lea	hl, iy
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, ___const.load_texture_appvar.faceRemap
	add	hl, de
	ld	(ix - 18), hl
	ld	de, 0
	push	de
	pop	bc
BB21_5:
	ld	(ix - 12), bc
	push	bc
	pop	hl
	ld	bc, 2
	or	a, a
	sbc	hl, bc
	jr	z, BB21_7
	ld	hl, (ix - 3)
	push	hl
	call	_ti_GetC
	pop	de
	ld	a, l
	ld	hl, (ix - 18)
	ld	hl, (hl)
	ld	c, 1
	call	__ishl
	push	hl
	pop	de
	ld	hl, (ix - 6)
	add	hl, de
	ld	bc, (ix - 12)
	add	hl, bc
	ld	(hl), a
	inc	bc
	jr	BB21_5
BB21_7:
	ld	iy, (ix - 15)
	inc	iy
	ld	de, 4
	jr	BB21_3
BB21_8:
	ld	hl, (ix - 9)
	inc	hl
	ld	iy, (ix - 6)
	lea	iy, iy + 12
	ld	(ix - 6), iy
	ld	iy, 0
	jp	BB21_2
BB21_9:
	ld	hl, (ix - 3)
	push	hl
	call	_ti_Close
	ld	de, (ix - 3)
	pop	hl
BB21_10:
	ld	a, e
	or	a, a
	jr	nz, BB21_12
	ld	a, 0
	jr	BB21_13
BB21_12:
	ld	a, -1
BB21_13:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_initWorld
_initWorld:
	ld	hl, -36
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, 0
	ld	bc, _world
	ld	(_worldSeed), hl
	ld	hl, 16
	ld	(ix - 6), bc
	push	hl
	pop	bc
BB22_1:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB22_18
	ld	iy, (_worldSeed)
	lea	hl, iy
	ld	bc, 131
	call	__imulu
	ld	(ix - 9), de
	add	hl, de
	xor	a, a
	push	hl
	pop	bc
	call	__ultof
	or	a, a
	sbc	hl, hl
	ld	e, 65
	call	__fmul
	ld	de, 0
	ld	(ix - 18), bc
	ld	l, a
	ld	(ix - 21), hl
	lea	hl, iy
	ld	bc, 17
	call	__imulu
	dec	bc
	ld	(ix - 24), hl
	ld	hl, (ix - 6)
	ld	(ix - 12), hl
	ld	(ix - 3), de
BB22_3:
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jp	z, BB22_17
	ld	hl, (ix - 24)
	ld	bc, (ix - 3)
	add	hl, bc
	xor	a, a
	push	hl
	pop	bc
	call	__ultof
	ex	de, hl
	ld	e, 65
	call	__fmul
	ld	l, a
	ld	de, 63
	push	de
	ld	de, 0
	push	de
	ld	de, 4
	push	de
	push	hl
	push	bc
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 18)
	push	hl
	call	_fbmNoise2D
	push	hl
	pop	bc
	ld	a, e
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	iy, -8388608
	lea	hl, iy
	ld	e, 63
	call	__fadd
	or	a, a
	sbc	hl, hl
	call	__fmul
	ld	l, a
	ld	de, 63
	push	de
	push	iy
	push	hl
	push	bc
	call	_fminf
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	ld	bc, 0
	push	bc
	push	bc
	push	de
	push	hl
	call	_fmaxf
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 4194304
	ld	e, 65
	call	__fmul
	call	__ftol
	push	bc
	pop	iy
	lea	hl, iy
	ld	de, 13
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	m, BB22_6
	ld	iy, 13
BB22_6:
	lea	hl, iy
	ld	de, 2
	add	hl, de
	ld	(ix - 27), hl
	lea	de, iy
	inc	de
	ld	bc, -2
	add	iy, bc
	ld	(ix - 33), iy
	ld	hl, (ix - 9)
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ld	(ix - 30), de
	ex	de, hl
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 3)
	add	iy, de
	ld	(ix - 36), iy
	ld	hl, (ix - 12)
	ld	(ix - 15), hl
	ld	bc, 0
BB22_7:
	push	bc
	pop	hl
	ld	de, 16
	or	a, a
	sbc	hl, de
	jr	z, BB22_16
	push	bc
	pop	hl
	ld	de, (ix - 27)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB22_11
	ld	hl, (ix - 30)
	or	a, a
	sbc	hl, bc
	jr	nz, BB22_12
	ld	hl, (ix - 36)
	ld	(hl), 1
	ld	iy, (ix - 15)
	jr	BB22_15
BB22_11:
	ld	iy, (ix - 15)
	ld	(iy), 0
	jr	BB22_15
BB22_12:
	push	bc
	pop	hl
	ld	de, (ix - 33)
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jp	p, BB22_14
	ld	iy, (ix - 15)
	ld	(iy), 3
	jr	BB22_15
BB22_14:
	ld	iy, (ix - 15)
	ld	(iy), 2
BB22_15:
	inc	bc
	lea	iy, iy + 16
	ld	(ix - 15), iy
	jr	BB22_7
BB22_16:
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	ld	hl, (ix - 12)
	inc	hl
	ld	(ix - 12), hl
	ld	de, 0
	ld	bc, 16
	jp	BB22_3
BB22_17:
	ld	hl, 65
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 116
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, _.str.91
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	bc, 2
	call	__idivs
	ld	de, 90
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.91
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 116
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, 222
	push	hl
	ld	hl, 119
	push	hl
	ld	hl, 49
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 70
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 9)
	ld	bc, 220
	call	__imulu
	ld	c, 4
	call	__ishru
	ld	de, 10
	push	de
	push	hl
	ld	hl, 120
	push	hl
	ld	hl, 50
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld	bc, 16
	ld	iy, (ix - 9)
	inc	iy
	ld	de, 256
	ld	hl, (ix - 6)
	add	hl, de
	lea	de, iy
	ld	(ix - 6), hl
	jp	BB22_1
BB22_18:
	ld	hl, 65
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 116
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, _.str.1.90
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	bc, 2
	call	__idivs
	ld	de, 90
	push	de
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, _.str.1.90
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, 116
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, 222
	push	hl
	ld	hl, 119
	push	hl
	ld	hl, 49
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 70
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, 220
	push	hl
	ld	hl, 120
	push	hl
	ld	hl, 50
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld	sp, ix
	pop	ix
	jp	_generateFaceVisibility
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_generateFaceVisibility
_generateFaceVisibility:
	ld	hl, -35
	call	__frameset
	ld	bc, 0
	ld	hl, _faceVisible
	ld	de, 16
	push	hl
	pop	iy
BB23_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	z, BB23_35
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 27), hl
	ld	(ix - 3), bc
	inc	bc
	ld	(ix - 18), bc
	ld	(ix - 12), iy
	or	a, a
	sbc	hl, hl
BB23_3:
	push	hl
	pop	bc
	ld	de, 16
	or	a, a
	sbc	hl, de
	jp	z, BB23_34
	ld	(ix - 24), iy
	push	bc
	pop	hl
	dec	hl
	ld	(ix - 30), hl
	ld	(ix - 6), bc
	inc	bc
	ld	(ix - 21), bc
	ld	iy, (ix - 12)
	or	a, a
	sbc	hl, hl
BB23_5:
	push	hl
	pop	bc
	ld	de, 16
	or	a, a
	sbc	hl, de
	jp	z, BB23_33
	ld	(ix - 15), iy
	ld	hl, (ix - 3)
	ld	e, 8
	ld	(ix - 9), bc
	ld	c, e
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ld	hl, (ix - 6)
	ld	d, 4
	ld	c, d
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	add	iy, de
	ld	a, (iy)
	or	a, a
	jr	nz, BB23_10
	ld	hl, (ix - 3)
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _anyFaceVisible
	add	iy, bc
	ld	hl, (ix - 6)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	add	iy, de
	ld	(iy), 0
	ld	bc, 0
BB23_8:
	push	bc
	pop	hl
	ld	de, 6
	or	a, a
	sbc	hl, de
	ld	iy, (ix - 15)
	ld	hl, (ix - 9)
	jp	z, BB23_32
	add	iy, bc
	ld	(iy), 0
	inc	bc
	jr	BB23_8
BB23_10:
	ld	hl, (ix - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jr	z, BB23_13
	ld	hl, (ix - 27)
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ld	hl, (ix - 6)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	add	iy, de
	ld	a, (iy)
	or	a, a
	ld	a, -1
	jr	z, BB23_13
	ld	a, 0
BB23_13:
	ld	hl, (ix - 3)
	ld	bc, 1536
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _faceVisible
	add	iy, bc
	ld	hl, (ix - 6)
	ld	bc, 96
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ex	de, hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 31), a
	and	a, 1
	ld	(iy), a
	ld	hl, (ix - 3)
	ld	bc, 15
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jr	z, BB23_16
	ld	hl, (ix - 18)
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ld	hl, (ix - 6)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	add	iy, de
	ld	a, (iy)
	or	a, a
	ld	a, -1
	jr	z, BB23_16
	ld	a, 0
BB23_16:
	ld	hl, (ix - 3)
	ld	bc, 1536
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _faceVisible
	add	iy, bc
	ld	de, (ix - 6)
	push	de
	pop	hl
	ld	bc, 96
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 9)
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 32), a
	and	a, 1
	ld	(iy + 1), a
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	ld	a, 1
	jr	z, BB23_19
	ex	de, hl
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ld	hl, (ix - 30)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	add	iy, de
	ld	a, (iy)
	or	a, a
	ld	a, -1
	jr	z, BB23_19
	ld	a, 0
BB23_19:
	ld	hl, (ix - 3)
	ld	bc, 1536
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _faceVisible
	add	iy, bc
	ld	de, (ix - 6)
	push	de
	pop	hl
	ld	bc, 96
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 9)
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 33), a
	and	a, 1
	ld	(iy + 2), a
	push	de
	pop	hl
	ld	bc, 15
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 3)
	ld	a, 1
	jr	z, BB23_23
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ld	hl, (ix - 21)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	add	iy, de
	ld	a, (iy)
	or	a, a
	ld	a, -1
	jr	z, BB23_22
	ld	a, 0
BB23_22:
	ld	de, (ix - 6)
BB23_23:
	ld	hl, (ix - 3)
	ld	bc, 1536
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _faceVisible
	add	iy, bc
	ex	de, hl
	ld	bc, 96
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 34), a
	and	a, 1
	ld	(iy + 3), a
	ex	de, hl
	ld	de, (ix - 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 3)
	ld	a, 1
	jr	z, BB23_27
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ex	de, hl
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	add	iy, de
	ld	a, (iy - 1)
	or	a, a
	ld	a, -1
	jr	z, BB23_26
	ld	a, 0
BB23_26:
	ld	de, (ix - 6)
BB23_27:
	ld	hl, (ix - 3)
	ld	bc, 1536
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _faceVisible
	add	iy, bc
	ex	de, hl
	ld	bc, 96
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 35), a
	and	a, 1
	ld	(iy + 4), a
	ex	de, hl
	ld	bc, 15
	or	a, a
	sbc	hl, bc
	ld	de, (ix - 3)
	ld	a, 1
	jr	z, BB23_31
	ex	de, hl
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _world
	add	iy, bc
	ld	hl, (ix - 6)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	add	iy, de
	ld	a, (iy + 1)
	or	a, a
	ld	a, -1
	jr	z, BB23_30
	ld	a, 0
BB23_30:
	ld	de, (ix - 3)
BB23_31:
	ex	de, hl
	ld	bc, 1536
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _faceVisible
	add	iy, bc
	ld	hl, (ix - 6)
	ld	bc, 96
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	l, a
	and	a, 1
	ld	(iy + 5), a
	ld	a, (ix - 31)
	or	a, (ix - 32)
	or	a, (ix - 33)
	or	a, (ix - 34)
	or	a, (ix - 35)
	or	a, l
	ld	hl, (ix - 3)
	ld	c, 8
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _anyFaceVisible
	add	iy, bc
	ld	hl, (ix - 6)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	add	iy, bc
	add	iy, de
	and	a, 1
	ld	(iy), a
	ld	iy, (ix - 15)
	ex	de, hl
BB23_32:
	inc	hl
	lea	iy, iy + 6
	jp	BB23_5
BB23_33:
	ld	iy, (ix - 12)
	lea	iy, iy + 96
	ld	(ix - 12), iy
	ld	hl, (ix - 21)
	ld	iy, (ix - 24)
	jp	BB23_3
BB23_34:
	ld	de, 1536
	add	iy, de
	ld	bc, (ix - 18)
	ld	de, 16
	jp	BB23_1
BB23_35:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_debugPage
_debugPage:
	rb	3

	section	.bss,"aw",@nobits
	public	_debugTileIndex
_debugTileIndex:
	rb	3

	section	.rodata,"a",@progbits
	private	_.str
_.str:
	db	"Page 0: Player/Camera", 0

	section	.rodata,"a",@progbits
	private	_.str.1
_.str.1:
	db	"cam: ", 0

	section	.rodata,"a",@progbits
	private	_.str.2
_.str.2:
	db	",", 0

	section	.rodata,"a",@progbits
	private	_.str.3
_.str.3:
	db	"rot: ", 0

	section	.rodata,"a",@progbits
	private	_.str.4
_.str.4:
	db	"Cursor: ", 0

	section	.rodata,"a",@progbits
	private	_.str.5
_.str.5:
	db	"Dot: ", 0

	section	.rodata,"a",@progbits
	private	_.str.6
_.str.6:
	db	"Valid: ", 0

	section	.rodata,"a",@progbits
	private	_.str.7
_.str.7:
	db	"Face: ", 0

	section	.rodata,"a",@progbits
	private	_.str.8
_.str.8:
	db	"Page 1: Transform + Depth", 0

	section	.rodata,"a",@progbits
	private	_.str.9
_.str.9:
	db	"t[", 0

	section	.rodata,"a",@progbits
	private	_.str.10
_.str.10:
	db	"]: ", 0

	section	.rodata,"a",@progbits
	private	_.str.11
_.str.11:
	db	"nz: ", 0

	section	.rodata,"a",@progbits
	private	_.str.12
_.str.12:
	db	"dot: ", 0

	section	.rodata,"a",@progbits
	private	_.str.13
_.str.13:
	db	"minTz: ", 0

	section	.rodata,"a",@progbits
	private	_.str.14
_.str.14:
	db	"maxTz: ", 0

	section	.rodata,"a",@progbits
	private	_.str.15
_.str.15:
	db	"mag: ", 0

	section	.rodata,"a",@progbits
	private	_.str.16
_.str.16:
	db	"area: ", 0

	section	.rodata,"a",@progbits
	private	_.str.17
_.str.17:
	db	"Page 2: Texturing", 0

	section	.rodata,"a",@progbits
	private	_.str.18
_.str.18:
	db	"Tile: ", 0

	section	.rodata,"a",@progbits
	private	___const.debug_Update.fx
___const.debug_Update.fx:
	dl	130
	dl	190
	dl	160
	dl	160
	dl	220
	dl	160

	section	.rodata,"a",@progbits
	private	___const.debug_Update.fy
___const.debug_Update.fy:
	dl	40
	dl	40
	dl	70
	dl	10
	dl	40
	dl	40

	section	.rodata,"a",@progbits
	private	_.str.19
_.str.19:
	db	"L", 0

	section	.rodata,"a",@progbits
	private	_.str.20
_.str.20:
	db	"R", 0

	section	.rodata,"a",@progbits
	private	_.str.21
_.str.21:
	db	"B", 0

	section	.rodata,"a",@progbits
	private	_.str.22
_.str.22:
	db	"T", 0

	section	.rodata,"a",@progbits
	private	_.str.23
_.str.23:
	db	"K", 0

	section	.rodata,"a",@progbits
	private	_.str.24
_.str.24:
	db	"F", 0

	section	.rodata,"a",@progbits
	private	___const.debug_Update.labels
___const.debug_Update.labels:
	dl	_.str.19
	dl	_.str.20
	dl	_.str.21
	dl	_.str.22
	dl	_.str.23
	dl	_.str.24

	section	.rodata,"a",@progbits
	private	_.str.25
_.str.25:
	db	"Page 3: Reserved", 0

	section	.rodata,"a",@progbits
	private	_.str.26
_.str.26:
	db	"Enter Seed:", 0

	section	.bss,"aw",@nobits
	public	_debugEnabled
_debugEnabled:
	rb	1

	section	.bss,"aw",@nobits
	public	_pause_selected
_pause_selected:
	rb	3

	section	.rodata,"a",@progbits
	private	_.str.27
_.str.27:
	db	"Continue", 0

	section	.rodata,"a",@progbits
	private	_.str.1.28
_.str.1.28:
	db	"Achievements", 0

	section	.rodata,"a",@progbits
	private	_.str.2.29
_.str.2.29:
	db	"Options", 0

	section	.rodata,"a",@progbits
	private	_.str.3.30
_.str.3.30:
	db	"Open to USB", 0

	section	.rodata,"a",@progbits
	private	_.str.4.31
_.str.4.31:
	db	"Save and Quit", 0

	section	.data,"aw",@progbits
	public	_pause_labels
_pause_labels:
	dl	_.str.27
	dl	_.str.1.28
	dl	_.str.2.29
	dl	_.str.3.30
	dl	_.str.4.31

	section	.rodata,"a",@progbits
	private	_.str.5.32
_.str.5.32:
	db	"Paused", 0

	section	.data,"aw",@progbits
	public	_cameraFOVDegrees
_cameraFOVDegrees:
	dd	0x42b40000

	section	.bss,"aw",@nobits
	public	_cursorBlockValid
_cursorBlockValid:
	rb	1

	section	.data,"aw",@progbits
	public	_closestCursorDot
_closestCursorDot:
	dd	0xbf800000

	section	.bss,"aw",@nobits
	public	_currentFPS
_currentFPS:
	rb	3

	section	.data,"aw",@progbits
	public	_cursorBlockFace
_cursorBlockFace:
	dl	16777215

	section	.bss,"aw",@nobits
	private	_updateFPS.lastSecond
_updateFPS.lastSecond:
	rb	1

	section	.bss,"aw",@nobits
	private	_updateFPS.framesThisSecond
_updateFPS.framesThisSecond:
	rb	3

	section	.bss,"aw",@nobits
	public	_rotX
_rotX:
	rb	4

	section	.bss,"aw",@nobits
	private	_sinRotX
_sinRotX:
	rb	4

	section	.bss,"aw",@nobits
	private	_cosRotX
_cosRotX:
	rb	4

	section	.bss,"aw",@nobits
	public	_rotY
_rotY:
	rb	4

	section	.bss,"aw",@nobits
	private	_sinRotY
_sinRotY:
	rb	4

	section	.bss,"aw",@nobits
	private	_cosRotY
_cosRotY:
	rb	4

	section	.bss,"aw",@nobits
	public	_camX
_camX:
	rb	4

	section	.bss,"aw",@nobits
	public	_camY
_camY:
	rb	4

	section	.data,"aw",@progbits
	public	_camZ
_camZ:
	dd	0xc0a00000

	section	.rodata,"a",@progbits
	private	___const.drawCubeFace.indices
___const.drawCubeFace.indices:
	dl	0
	dl	3
	dl	7
	dl	4
	dl	1
	dl	2
	dl	6
	dl	5
	dl	0
	dl	1
	dl	5
	dl	4
	dl	3
	dl	2
	dl	6
	dl	7
	dl	4
	dl	5
	dl	6
	dl	7
	dl	0
	dl	1
	dl	2
	dl	3

	section	.bss,"aw",@nobits
	public	_debug_tx
_debug_tx:
	rb	16

	section	.bss,"aw",@nobits
	public	_debug_ty
_debug_ty:
	rb	16

	section	.bss,"aw",@nobits
	public	_debug_tz
_debug_tz:
	rb	16

	section	.bss,"aw",@nobits
	public	_debug_nz
_debug_nz:
	rb	4

	section	.bss,"aw",@nobits
	public	_debug_dot
_debug_dot:
	rb	4

	section	.bss,"aw",@nobits
	public	_debug_min_tz
_debug_min_tz:
	rb	4

	section	.bss,"aw",@nobits
	public	_debug_max_tz
_debug_max_tz:
	rb	4

	section	.bss,"aw",@nobits
	public	_debug_mag
_debug_mag:
	rb	4

	section	.bss,"aw",@nobits
	public	_debug_area
_debug_area:
	rb	4

	section	.bss,"aw",@nobits
	public	_playerFOV
_playerFOV:
	rb	4

	section	.bss,"aw",@nobits
	public	_cursorBlockX
_cursorBlockX:
	rb	3

	section	.bss,"aw",@nobits
	public	_cursorBlockY
_cursorBlockY:
	rb	3

	section	.bss,"aw",@nobits
	public	_cursorBlockZ
_cursorBlockZ:
	rb	3

	section	.data,"aw",@progbits
	public	_renderDistance
_renderDistance:
	dl	3

	section	.rodata,"a",@progbits
	private	_.str.71
_.str.71:
	db	"cam:", 0

	section	.rodata,"a",@progbits
	private	_.str.1.72
_.str.1.72:
	db	" ", 0

	section	.rodata,"a",@progbits
	private	_.str.2.73
_.str.2.73:
	db	"rot:", 0

	section	.rodata,"a",@progbits
	private	_.str.3.74
_.str.3.74:
	db	"Cubes:", 0

	section	.rodata,"a",@progbits
	private	_.str.4.75
_.str.4.75:
	db	"FPS:", 0

	section	.rodata,"a",@progbits
	private	_.str.80
_.str.80:
	db	"BLOCKTILES", 0

	section	.rodata,"a",@progbits
	private	_.str.1.81
_.str.1.81:
	db	"r", 0

	section	.rodata,"a",@progbits
	private	___const.load_texture_appvar.faceRemap
___const.load_texture_appvar.faceRemap:
	dl	3
	dl	2
	dl	0
	dl	1
	dl	4
	dl	5

	section	.bss,"aw",@nobits
	public	_texture_colors
_texture_colors:
	rb	48

	section	.data,"aw",@progbits
	public	_worldSeed
_worldSeed:
	dl	42069

	section	.bss,"aw",@nobits
	public	_world
_world:
	rb	4096

	section	.rodata,"a",@progbits
	private	_.str.91
_.str.91:
	db	"Generating world...", 0

	section	.rodata,"a",@progbits
	private	_.str.1.90
_.str.1.90:
	db	"Generating Face Visibility...", 0

	section	.bss,"aw",@nobits
	public	_anyFaceVisible
_anyFaceVisible:
	rb	4096

	section	.bss,"aw",@nobits
	public	_faceVisible
_faceVisible:
	rb	24576

	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 23b78267b5d376b232475d0805a937e54b61e0d0)"
	extern	_fabsf
	extern	__Unwind_SjLj_Register
	extern	_gfx_PrintChar
	extern	__fadd
	extern	__idivu
	extern	__idivs
	extern	_ti_GetC
	extern	__ixor
	extern	_ti_Open
	extern	_gfx_PrintUInt
	extern	__ltof
	extern	_sinf
	extern	_cosf
	extern	_sqrtf
	extern	_fmaxf
	extern	__ishru
	extern	__fmul
	extern	_gfx_FillScreen
	extern	__fdiv
	extern	__imulu
	extern	_fminf
	extern	_gfx_Rectangle
	extern	_gfx_End
	extern	__fcmp
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	_ti_Close
	extern	__sand
	extern	_gfx_PrintString
	extern	__ishl
	extern	__ftol
	extern	__ladd
	extern	_gfx_PrintInt
	extern	__setflag
	extern	_gfx_FillRectangle
	extern	_gfx_SetClipRegion
	extern	__fsub
	extern	_tanf
	extern	__frameset
	extern	_kb_Scan
	extern	_gfx_GetStringWidth
	extern	_ti_Seek
	extern	__ultof
	extern	_gfx_SwapDraw
	extern	_gfx_SetDraw
	extern	__Unwind_SjLj_Unregister
	extern	__irems
	extern	__fneg
	extern	__iremu
	extern	_gfx_SetColor
	extern	_gfx_FillTriangle_NoClip
	extern	__isnanf
